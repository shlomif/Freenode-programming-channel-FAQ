<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article>
<article xmlns="http://docbook.org/ns/docbook" lang="en" version="5.0" xml:lang="en" xmlns:xlink="http://www.w3.org/1999/xlink" >
<info>
<title>Freenode programming channel FAQ</title>
</info>
<section xml:id="freenode-programming-channel-faq">
<title>Freenode programming channel FAQ</title>
<para>
This page is intended to be global for the whole
<link xlink:href="irc://irc.freenode.net/%23%23programming">##programming</link>
channel. So feel free to clone and reuse.
</para>
<section xml:id="the-questions">
<title>The Questions</title>
<section xml:id="how-do-i-talk-on-the-channel">
<title>How do I talk on the channel?</title>
<para>
In order to talk on ##programming, connect your IRC client to
the irc.freenode.net server, type «/join ##programming»
(without the angle brackets) and press enter. It is a good
idea to register your nickname with the Freenode network (see
/msg NickServ HELP). This URL may work for you:
<link xlink:href="irc://irc.freenode.net/%23%23programming">irc://irc.freenode.net/##programming</link>
.
</para>
<para>
Freenode also provides a web interface here:
<link xlink:href="http://webchat.freenode.net/"><link xlink:href="http://webchat.freenode.net/">http://webchat.freenode.net/</link></link>
. For more information about viable IRC clients see:
</para>
<itemizedlist spacing="compact">
<listitem>
<para>
<link xlink:href="http://perl-begin.org/irc/"><link xlink:href="http://perl-begin.org/irc/">http://perl-begin.org/irc/</link></link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="http://www.shlomifish.org/open-source/resources/networking-clients/">List
of Networking Clients</link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://en.wikipedia.org/wiki/Comparison_of_Internet_Relay_Chat_clients">https://en.wikipedia.org/wiki/Comparison_of_Internet_Relay_Chat_clients</link>
</para>
</listitem>
</itemizedlist>
</section>
<section xml:id="what-is-considered-on-topic-on-programming-what-is-considered-off-topic">
<title>What is considered on-topic on ##programming? What is
considered off-topic?</title>
<para>
Refer to
<link xlink:href="https://github.com/jeaye/2lb_programming/blob/master/README.md">the
channel rules</link> for more information.
</para>
</section>
<section xml:id="how-do-i-address-someone-to-grab-hisher-attention">
<title>How do I address someone to grab his/her
attention?</title>
<para>
Just say their nickname followed by a colon (&quot;:&quot;) or
a comma (&quot;,&quot;). Many IRC clients will allow you to do
that by typing the first letters of the nickname followed by
pressing the
<link xlink:href="https://en.wikipedia.org/wiki/Tab_key">tab
key</link> (so-called &quot;tab-completion&quot;). Please
don't generally private message someone using the
<literal>/msg</literal> or <literal>/query</literal> commands
because that way other people cannot view and contribute to
what you are saying.
</para>
</section>
<section xml:id="i-tried-joining-a-different-channel-for-help-but-i-could-not---why">
<title>I tried joining a different channel for help, but I could
not - why?</title>
<para>
Some channels people try to join to seek help with their
technology (notably ##java) require registration at the
Freenode services. See
<link xlink:href="http://freenode.net/kb/all">Freenode’s
knowledge base</link> for more information about user/nickname
registration.
</para>
<para>
Note that you are still welcome to ask questions related to
specific technologies on ##programming, but otherwise you'll
probably get more help on the topic-specific channels.
</para>
</section>
<section xml:id="what-is-the-channel-for-topictechnology">
<title>What is the channel for
<emphasis>T</emphasis><emphasis>O</emphasis><emphasis>P</emphasis><emphasis>I</emphasis><emphasis>C</emphasis>/TECHNOLOGY?</title>
<para>
You can search the channels list by following the instructions
in the command <literal>/msg alis help</literal> .
</para>
</section>
<section xml:id="why-do-programming-and-other-channels-have-two--whereas-other-channels-have-only-one">
<title>Why do ##programming and other channels have two
&quot;#&quot; whereas other channels have only one?</title>
<para>
To quote from
<link xlink:href="http://richard.esplins.org/siwi/2011/07/08/getting-started-freenode-irc/">this
post about Freenode</link>: «The name of a “Primary Channel”
starts with a single hash (“#”) and is discussion forum for a
specific project or community (like Alfresco, or your local
LUG). “About channels” start with a double hash and host
conversations about a topic or subject (for example:
##security). »
</para>
</section>
<section xml:id="why-do-some-users-on-the-channel-have-v-voice-a--sign-a-blue-circle-etc">
<title>Why do some users on the channel have +v (voice, a +
sign, a blue circle, etc.)?</title>
<para>
These users are voiced so in case the channel is under attack,
and it will become restricted, then they and only they will be
able to talk here. Normally, it should not matter, as when
there is no major abuse, everyone can talk whether +v'ed or
not.
</para>
</section>
<section xml:id="why-should-i-learn-how-to-program-properly">
<title>Why should I learn how to program properly?</title>
<para>
To
<link xlink:href="https://perl.plover.com/Questions4.html">quote
MJD</link> «Because you can't just make shit up and expect the
computer to magically know what you mean, Retardo!». Trying to
whip up working code without a fundamental understanding of
programming may cause any of:
</para>
<itemizedlist spacing="compact">
<listitem>
<para>
Compiler errors
</para>
</listitem>
<listitem>
<para>
Buggy code
</para>
</listitem>
<listitem>
<para>
Security vulnerabilities
</para>
</listitem>
<listitem>
<para>
Data loss
</para>
</listitem>
<listitem>
<para>
Loss of time or money or worse.
</para>
</listitem>
<listitem>
<para>
Wasting the time of the knowledgable people in the channel
by being a
<link xlink:href="https://duckduckgo.com/?q=help+vampire&amp;atb=v140-1&amp;ia=web">help
vampire</link>.
</para>
</listitem>
</itemizedlist>
<para>
So please
<link linkend="i-want-to-learn-programming-which-language-should-i-start-with">learn
programming properly</link> .
</para>
</section>

<section xml:id="how-should-i-ask-a-question-on-the-channel-can-i">
<title>How should I ask a question on the channel? Can
I?</title>
<para>
The first guideline is that you should not “ask to ask” by
saying “May I ask a question?” or asking if anyone worked with
that certain technology. Just ask for help directly. Also see
<link xlink:href="https://dontasktoask.com/">https://dontasktoask.com/</link>
.
</para>
<para>
The second guideline is that you should probably read or skim
the guide
<link xlink:href="https://codeblog.jonskeet.uk/2010/08/29/writing-the-perfect-question/">“Writing
the Perfect Question”</link> (or the older and somewhat
deficient in style
<link xlink:href="http://catb.org/~esr/faqs/smart-questions.html">“How
To Ask Questions The Smart Way”</link> ) and try to follow
their wisdom, which involves doing some prior due diligence.
</para>
<para>
Otherwise, also see the next question for how to share the
offending code with the channel.
</para>
</section>
<section xml:id="i-have-a-problem-with-my-code-how-should-i-share-it-for-people-to-review">
<title>I have a problem with my code, how should I share it for
people to review?</title>
<para>
First of all, your code should exhibit the problem you are
having and should be a ''self-contained'', and ''reproducing''
example (see <link xlink:href="http://sscce.org/">“The Short,
Self Contained, Correct, Example”</link> page). If the code is
too large, please consider reducing it to a more minimal
example that still exhibits the problem (see the
<link xlink:href="https://en.wikipedia.org/wiki/Bisection_method">bisection
method</link> ).
</para>
<para>
Please don't share non-runnable pieces and fragments of your
code, see
<link xlink:href="http://shadow.cat/blog/matt-s-trout/show-us-the-whole-code/">“Show
Us The Whole Code”</link> .
</para>
<para>
Once you have that, you have several options to share it. If
you are coding a web page, you can try sharing your code using
<link xlink:href="http://jsfiddle.net/">jsfiddle</link> .
Otherwise, if your code is self-contained in one file, you can
use a paste site such as
<link xlink:href="http://ideone.com/">ideone</link> or
<link xlink:href="https://paste.debian.net/">paste.debian.net</link>.
Please don't floodpaste the code to the channel because this
is slower and more annoying than using a paste site and may
get you kicked or devoiced out of the channel.
</para>
<para>
If you have more than one file in the project, then you should
put it in a self-contained version control repository on a
code sharing site such as
<link xlink:href="http://github.com/">GitHub</link> ,
<link xlink:href="http://bitbucket.org/">Bitbucket</link> , or
<link xlink:href="https://about.gitlab.com/">GitLab</link> ,
so we can easily clone or checkout it.
</para>
<para>
For more guidelines, see
<link xlink:href="https://github.com/shlomif/how-to-share-code-online">https://github.com/shlomif/how-to-share-code-online</link>
.
</para>
</section>
<section xml:id="i-do-not-see-anyone-talking-on-the-channel---is-it-dead">
<title>I do not see anyone talking on the channel - is it
dead?</title>
<para>
The channel is still active, but may grow silent for several
hours at a time, especially during the weekends and other
holidays. Stick around and you should see some conversation
eventually.
</para>
</section>
<section xml:id="which-integrated-development-environment-ide-or-text-editor-would-you-recommend">
<title>Which Integrated Development Environment (IDE) or Text
Editor Would You Recommend?</title>
<para>
We get asked this question a lot. The answer is a bit long.
First of all, it is likely that the following editing
mechanisms will not be adequate for editing code:
</para>
<itemizedlist spacing="compact">
<listitem>
<para>
Rich-text editors including, but not limited to, Microsoft
Windows WordPad (formerly known as Windows Write, we were
informed that it has a text editing mode, but see below),
word processors such as Microsoft Word,
OpenOffice.org/LibreOffice Writer, WordPerfect, AbiWord,
etc. and WYSIWYG (= &quot;What you see is what you
get&quot;) HTML editors. These are not suitable for
editing code.
</para>
</listitem>
<listitem>
<para>
Limited text editors such as Microsoft Windows Notepad
(see
<link xlink:href="http://www.notepad.org/">http://www.notepad.org/</link>
for a very fun link about it ), or
<link xlink:href="https://en.wikipedia.org/wiki/Pico_%28text_editor%29">Pico</link>
which are aimed for casual editing of text documents. More
capable text editors such as
<link xlink:href="http://notepad-plus-plus.org/">Notepad++</link>,
<link xlink:href="http://www.flos-freeware.ch/notepad2.html">Notepad2</link>
and <link xlink:href="http://www.nano-editor.org/">GNU
Nano</link>, should be OK.
</para>
</listitem>
</itemizedlist>
<para>
These editors may still be useful if they are all you can use,
but if you can afford to install and/or use a more capable
text editor, it is, by all means, a good idea.
</para>
<para>
Otherwise, asking the channel about the most recommend text
editor will end up in people giving you their own preferences
(which may have involved many years of trying different
solutions, and dedicating some time to studying their existing
preference and getting accustomed to it). Some links to get
you started:
</para>
<itemizedlist spacing="compact">
<listitem>
<para>
<link xlink:href="http://www.shlomifish.org/open-source/resources/editors-and-IDEs/">The
“List of Text Editors and IDEs”</link> on Shlomi Fish’s
homepage. (Not complete, but covers the most prominent
solutions).
</para>
</listitem>
<listitem>
<para>
<link xlink:href="http://texteditors.org/">The Text
Editors Wiki</link>
</para>
</listitem>
<listitem>
<para>
The
<link xlink:href="https://en.wikipedia.org/wiki/Comparison_of_integrated_development_environments">Wikipedia
Comparison of IDEs</link> and their
<link xlink:href="https://en.wikipedia.org/wiki/List_of_text_editors">List
of Text Editors</link>
</para>
</listitem>
</itemizedlist>
<para>
Note that many decent text editors and IDEs are open-source,
free-of-charge, and cross-platform (Windows, Mac OS X and
Linux/UNIX). As a result, there is no good excuse not to
download one, install it, and use it.
</para>
</section>

<section xml:id="i-want-to-learn-programming-which-language-should-i-start-with">
<title>I want to learn programming? Which language should I
start with?</title>
<para>
Different people will give different answers when asked that.
Most people on ##programming believe that something like
<link xlink:href="https://en.wikipedia.org/wiki/Python_%28programming_language%29">the
Python programming language</link> would be a good start.
Python is a popular, useful, open source, and cross-platform
(runs fine on Windows, Linux and Mac OS X and on many other
less common platforms) language, that is not too hard to learn
and get your feet wet with. Some resources to learn Python
are:
</para>
<itemizedlist spacing="compact">
<listitem>
<para>
<link xlink:href="http://automatetheboringstuff.com/"><emphasis>Automate
the Boring Stuff with Python</emphasis></link> -
“Practical programming for total beginners.”
</para>
</listitem>
<listitem>
<para>
<link xlink:href="http://openbookproject.net/thinkcs/"><emphasis>How
to think like a computer scientist - Learning in
Python</emphasis></link> - a similar book.
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://python.swaroopch.com/"><emphasis>A
Byte of Python</emphasis></link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://www.obeythetestinggoat.com/pages/book.html"><emphasis>Test-Driven
Development with Python</emphasis></link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://www.youtube.com/user/schafer5">Cory
Schafer's Video Tutorials’ Channel</link> - in case you
prefer video tutorials.
</para>
</listitem>
<listitem>
<para>
<link xlink:href="http://docs.python.org/tutorial/">The
Official Python Tutorial</link> - may not be too useful
for people with no programming experience.
</para>
</listitem>
</itemizedlist>
<para>
Here are some resources for learning other programming
languages, whether as a first language or after knowing some
other languages:
</para>
<itemizedlist spacing="compact">
<listitem>
<para>
<link xlink:href="http://c-begin.wikia.com/wiki/C_and_C%2B%2B_Beginners_Wiki">The
C/C++ Beginners' Wiki</link> and the more mature (but with
a non-clear licence)
<link xlink:href="http://www.iso-9899.info/">Freenode ##C
Wiki</link>.
</para>
</listitem>
<listitem>
<para>
<link xlink:href="http://perl-begin.org/">The Perl
Beginners Site</link> for Perl beginners.
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://developer.mozilla.org/en-US/docs/Learn">Learn
Web Development</link> on MDN.
</para>
<itemizedlist spacing="compact">
<listitem>
<para>
<link xlink:href="https://github.com/javascript-tutorial/en.javascript.info/">JavaScript
Tutorial</link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://htmldog.com/">HTML
Dog</link>
</para>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<para>
<link xlink:href="https://github.com/EbookFoundation/free-programming-books">List
of Freely available programming books</link> - and other
resources, for many programming languages and in several
human languages. May vary in quality.
</para>
</listitem>
</itemizedlist>
</section>
<section xml:id="what-amount-of-due-diligence-should-i-do-before-asking-for-help">
<title>What amount of due diligence should I do before asking
for help?</title>
<para>
Make sure you know how to program in at least one programming
language (see the
<link linkend="i-want-to-learn-programming-which-language-should-i-start-with">previous
question</link> ) and understand the fundamentals of the
general topic with which you are having a problem, by having
read a book, a good tutorial, a video, an online course, etc.
Otherwise, you might ask the wrong questions, or misguided
ones, and generally waste the time of the more experienced
people on the channel who are trying to help you.
</para>
</section>

<section xml:id="how-do-i-learn-how-to-program">
<title>How do I learn how to program?</title>
<para>
See the
<link linkend="i-want-to-learn-programming-which-language-should-i-start-with">previous
question</link>.
</para>
</section>

<section xml:id="how-should-i-do-binary-inputoutput-properly">
<title>How should I do binary Input/Output properly?</title>
<para>
Some people would naïvely assume that writing a C struct
directly to a file would be a good solution for outputting it
to disk. That is far from being the case, however. The
representation of a struct in memory is subject to many
system-dependent factors, such as:
</para>
<itemizedlist spacing="compact">
<listitem>
<para>
<link xlink:href="http://en.wikipedia.org/wiki/Endianness">Endianness</link>
- also referred to as “byte sex”, this determines whether
bytes are stored in memory with the lowest byte first or
the highest one.
</para>
</listitem>
<listitem>
<para>
Padding - for efficiency reasons, compilers tend to place
empty spaces between the fields of structs. The amount of
such space is not standardised and varies between systems,
compilers (and even compilation options can affect it).
</para>
</listitem>
<listitem>
<para>
Integral data types and pointers can vary in their nominal
size. I.e: an &quot;int&quot; can be 16-bit, 32-bit, or
64-bit, a &quot;long&quot; can be 32-bit or 64-bit, etc.,
which is system-dependent.
</para>
</listitem>
</itemizedlist>
<para>
The O’Reilly book
<link xlink:href="http://www.lemis.com/grog/Documentation/PUS/">Porting
UNIX Software</link> (which is available for purchase, or as a free
download under a Creative Commons licence, on the link), goes
into further depth about these and many other UNIX portability
issues.
</para>
<para>
In any case, the best way to mitigate this problem portably
and safely, is to write (and later read) every field (and
sometimes every byte within) to the disk or network. You
should be able to find some mechanisms inside
<link xlink:href="http://www.shlomifish.org/open-source/portability-libs/">portable
libraries</link> to do that.
</para>
</section>

<section xml:id="what-are-some-best-practices-in-programming-that-i-should-adopt">
<title>What are some best practices in programming that I should
adopt?</title>
<para>
First of all, we should note that many best practices may
still be controversial to a small or large extent, despite
being very common in the industry. We also don't expect a
beginning programmer who writes some simple programs to
immediately employ all the best practices that go into
developing mission-critical software on which lives are
dependent.
</para>
<para>
But here goes with a grain of salt:
</para>
<orderedlist numeration="arabic" spacing="compact">
<listitem>
<para>
Use a good
<link xlink:href="http://en.wikipedia.org/wiki/Revision_control">version
control system</link>. For more about version control
systems and the motivation behind them see
<link xlink:href="http://better-scm.shlomifish.org/">the
“Better SCM” Site</link> and
<link xlink:href="http://www.slideshare.net/xSawyer/source-code-management-systems">Sawyer
X’s talk about source code management systems</link>.
</para>
<para>
As of 2024, <link xlink:href="https://en.wikipedia.org/wiki/Git">the Git version control system</link> has established itself as the dominant and go-to solution. While Git is not perfect, in our opinion we think that <link xlink:href="https://www.shlomifish.org/humour/fortunes/show.cgi?id=sharp-programming-BitKeeper-or-GitHub">it is good enough</link> to avoid using any-of-the-semingly-less-popular alternatives.
</para>
</listitem>
</orderedlist>
<itemizedlist spacing="compact">
<listitem>
<para>
Please don't give the usual clichés that you don't need a
version control system if you’re only one person or that
the project is not large enough to warrant it. You
probably do.
</para>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic" spacing="compact">
<listitem override="2">
<para>
Write Automated Tests. See
<link xlink:href="https://github.com/shlomif/what-you-should-know-about-automated-testing">“What
you should know about automated software testing”</link>,
the wikipedia
<link xlink:href="http://en.wikipedia.org/wiki/Test-driven_development">Test-driven
development</link> entry and other resources.
</para>
</listitem>
<listitem>
<para>
Use a standard build/configuration system for the language
you use. Simple
<link xlink:href="http://en.wikipedia.org/wiki/Makefile">makefiles</link>
may be adequate for small projects, especially those
written in C or C++. If you need to handle dependencies,
build-time configuration variables and other
complications, you should look at
<link xlink:href="http://www.shlomifish.org/open-source/resources/software-tools/">alternatives
for C</link> or the community-based alternatives for your
programming language of choice (e.g:
<link xlink:href="http://en.wikipedia.org/wiki/Setuptools">setuptools</link>
for Python;
<link xlink:href="http://dzil.org/">Dist::Zilla</link> for
Perl;
<link xlink:href="http://en.wikipedia.org/wiki/RubyGems">RubyGems</link>
for Ruby).
</para>
</listitem>
<listitem>
<para>
Deploy a local or hosted
<link xlink:href="https://en.wikipedia.org/wiki/Continuous_integration">Continuous
Integration</link> (CI) service and make sure that failing
builds or tests are remedied.
</para>
</listitem>
<listitem>
<para>
Set up a
<link xlink:href="https://en.wikipedia.org/wiki/Bug_tracking_system">bug
tracker</link> and use it to manage the issues and tasks'
list. Some code-sharing sites provide hosted web-based
issue trackers free-of-charge.
</para>
</listitem>
<listitem>
<para>
Implement
<link xlink:href="https://reproducible-builds.org/">Reproducible
Builds</link> (
<link xlink:href="https://en.wikipedia.org/wiki/Reproducible_builds">Wikipedia
page</link> ).
</para>
</listitem>
<listitem>
<para>
Use
<link xlink:href="https://en.wikipedia.org/wiki/Code_refactoring">code
refactoring</link> to get rid of
<link xlink:href="https://en.wikipedia.org/wiki/Code_smell">code
smells</link> such as duplicate code or magic constants.
Also see
<link xlink:href="https://www.joelonsoftware.com/2002/01/23/rub-a-dub-dub/">&quot;Rub
a dub dub&quot;</link>.
</para>
</listitem>
<listitem>
<para>
If possible, make use of
<link xlink:href="https://github.com/caramelomartins/awesome-linters">linters,
autoformatters, and validators</link> and incorporate them
into the test suite and CI.
</para>
</listitem>
</orderedlist>
<para>
For more information consult these links:
</para>
<orderedlist numeration="arabic" spacing="compact">
<listitem>
<para>
The essay
<link xlink:href="http://www.shlomifish.org/philosophy/computers/high-quality-software/rev2/">“What
Makes Software High Quality?”</link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://github.com/Kristories/awesome-guidelines">“Awesome
Guidelines”</link> - a curated list of high quality coding
style conventions and standards.
</para>
</listitem>
<listitem>
<para>
The Perl Beginners Site
<link xlink:href="http://perl-begin.org/tutorials/bad-elements/">“Perl
Elements to avoid”</link> and its spin-off
<link xlink:href="http://www.shlomifish.org/lecture/C-and-CPP/bad-elements/">“C
and C++ Elements to Avoid”</link> (both of which have a
lot of good advice related to other programming
languages).
</para>
</listitem>
<listitem>
<para>
The essay
<link xlink:href="https://github.com/ryanmcdermott/clean-code-javascript">“Clean
Code JavaScript”</link> on GitHub.
</para>
</listitem>
<listitem>
<para>
The tongue-in-cheek essay
<link xlink:href="https://github.com/Droogans/unmaintainable-code">“How
To Write Unmaintainable Code”</link> .
</para>
</listitem>
<listitem>
<para>
A
<link xlink:href="http://perlhacks.com/2012/03/you-must-hate-version-control-systems/">discussion</link>
on Dave Cross’ Perl Hacks blog titled “You Must Hate
Version Control Systems”.
</para>
</listitem>
<listitem>
<para>
<link xlink:href="http://thedailywtf.com/">The Daily
WTF</link> is a web site dedicated to posts about awful,
but funny, programming practices.
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/">The
Joel Test</link> and similar resources on the
<link xlink:href="https://www.joelonsoftware.com/">Joel on
Software</link> site.
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://simpleprogrammer.com/2017/10/06/5-tips-code-quality/">“5
Tips to Increase your Code Quality”</link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://github.com/caramelomartins/awesome-linters">“Awesome
Linters”</link> and
<link xlink:href="https://www.shlomifish.org/open-source/resources/software-quality-enhancement/">“Software
Quality Enhancement Tools and Links”</link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://dev.to/apkoponen/100-tips-on-software-developer-productivity-36if">“100
Tips on Software Developer Productivity”</link> - by Ari
Koponen.
</para>
</listitem>
</orderedlist>
</section>

<section xml:id="what-is-the-best-programming-language">
<title>What is the best programming language?</title>
<para>
We sometimes get asked this question, and the answer is
simple: there is none. Different languages have different
strengths, weaknesses and often trade offs. You may wish to
read the blog post
<link xlink:href="https://www.shlomifish.org/philosophy/computers/your-programming-language-must-suck/">“Why
Your Programming Language Must Suck”</link> for a short
coverage of some of the important trade-offs a language design
will have, and why not everyone will be happy with your
choices.
</para>
<para>
Even if we settle on a certain amount of preferences, then you
may run into other factors that influence which language you
may prefer:
</para>
<orderedlist numeration="arabic" spacing="compact">
<listitem>
<para>
Should the program run as quickly as possible? Or do you
want to optimise for the developers’ time?
</para>
</listitem>
<listitem>
<para>
Is low memory consumption critical?
</para>
</listitem>
<listitem>
<para>
Should the language be portable to various operating
systems and/or CPUs? Or is it OK if it only runs somewhere
specific?
</para>
</listitem>
<listitem>
<para>
Should the language have an open-source implementation?
</para>
</listitem>
<listitem>
<para>
Should the language have a large user base, and provide
quick and useful support?
</para>
</listitem>
<listitem>
<para>
Should bugs be addressed and fixed quickly in the
implementations?
</para>
</listitem>
<listitem>
<para>
Should the language have any particular built-in features
that you desire?
</para>
</listitem>
<listitem>
<para>
Should the language have an extensive library of
extensions and APIs that can be reused?
</para>
</listitem>
</orderedlist>
<para>
Etc. If you tell us what your needs are, we can help you with
a recommendation.
</para>
<para>
Note that some of the channel members happen to like a certain
programming language in particular and tend to constantly
recommend it to other people. Furthermore, you may run into
language wars where one or more languages are bashed as awful
languages by participants in the channel. That does not mean
these languages are necessarily good or bad or suitable for
what you wish to do.
</para>
</section>
<section xml:id="what-is-the-best-insert-type-of-product-with-some-alternatives-what-is-the-best-and-insert-adjective-here">
<title>What is the best [insert type of product with some
alternatives]? What is the best and [insert adjective
here]?</title>
<para>
We also get asked this a lot and the answer is similar to the
previous question: best in which respect? The various
alternatives may have functionality trade-offs, and even if
the factors are not at odds with one another, there can be
remaining issues due to lack of developer time, policy, or
design. Please tell us what exactly is the most important to
you.
</para>
<para>
Note that &quot;best and [insert adjective here]&quot; is
equally puzzling. Do you want the product with this property
or do you also seek some other qualities?
</para>
</section>
<section xml:id="i-needam-forced-to-work-with-a-certain-technology-eg-programming-language-or-framework-which-i-hate-what-should-i-do">
<title>I need/am forced to work with a certain technology (e.g:
programming language or framework) which I hate. What should I
do?</title>
<para>
You may wish to read
<link xlink:href="https://shlomifish.livejournal.com/1747.html">this
post</link> about Stoicism and Peace of Mind or
<link xlink:href="https://en.wikisource.org/wiki/Tao_Te_Ching">the
Tao Te Ching</link>. Namely, you can say to yourself:
&quot;OK, this is not ideal, but I cannot avoid it, so I'll
try to tolerate it, and make the best of it, and maybe even
grow to like it.&quot;.
</para>
</section>
<section xml:id="what-are-good-resources-including-books-to-learn-about-algorithms">
<title>What are good resources (including books) to learn about
algorithms?</title>
<para>
Here are some resources for learning about algorithms:
</para>
<itemizedlist spacing="compact">
<listitem>
<para>
<link xlink:href="http://www.algorist.com/">The Algorithm
Design Manual</link> by Steven Skiena. An accessible, yet
accurate, book and not a very technical one that provides
a good introduction and reference for algorithms.
</para>
</listitem>
<listitem>
<para>
<link xlink:href="http://en.wikipedia.org/wiki/List_of_data_structures">Wikipedia's
list of data structures</link> and
<link xlink:href="http://en.wikipedia.org/wiki/List_of_algorithms">Wikipedia's
list of algorithms</link>.
</para>
</listitem>
<listitem>
<para>
<link xlink:href="http://en.wikibooks.org/wiki/Data_Structures">The
Data Structures Wikibook</link>
</para>
</listitem>
<listitem>
<para>
The CC-by book
<link xlink:href="http://opendatastructures.org/">Open
Data Structures</link>.
</para>
</listitem>
<listitem>
<para>
<link xlink:href="http://en.wikipedia.org/wiki/Introduction_to_Algorithms">The
Book <emphasis>Introduction to
Algorithms</emphasis></link> - by Cormen et. all (a.k.a
“CLR” or “CLRS”) - a comprehensive reference on algorithms
and data structures, but a technical and dry one.
</para>
</listitem>
<listitem>
<para>
<link xlink:href="http://shop.oreilly.com/product/9781565923980.do"><emphasis>Mastering
Algorithms with Perl</emphasis></link> and
<link xlink:href="http://shop.oreilly.com/product/9781565924536.do"><emphasis>Mastering
Algorithms with C</emphasis></link> from O’Reilly Media.
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://github.com/TheAlgorithms">“The
Algorithms” GitHub organisation</link> - contains
repositories of codebases for popular algorithms and data
structures in several programming languages.
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://greenteapress.com/wp/think-data-structures/">Think
Data Structures</link> - by Green Tea Press - a gratis and
CC-by-nc-sa lightweight book using Java.
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://en.wikipedia.org/wiki/The_Art_of_Computer_Programming">“The
Art of Computer Programming”</link> - (aka “TAOCP” or
“Knuth”) - an esteemed series of books, by an esteemed
author, but one that is only accessible to those who are
very experienced programmers, and so not recommended here
due to the scope of the question. Mentioned here only for
completeness sake.
</para>
</listitem>
</itemizedlist>
<para>
There's also a
<link xlink:href="irc://irc.freenode.net/%23algorithms">channel
called &quot;#algorithms&quot; on Freenode</link> and,
naturally, you can discuss algorithms on ##programming, as
long as you perform due diligence.
</para>
</section>
<section xml:id="i-have-an-awesome-idea-for-a-great-project-probably-a-game-and-i-want-people-to-help-me">
<title>I have an awesome idea for a great project (probably a
game) and I want people to help me…</title>
<para>
First of all, we appreciate your enthusiasm, but you should
realise that most of us have better things to do than help you
(even if they are unemployed), and so you should offer money
(and we don't mean a share of the profits.). If not, you are
quite unlikely to recruit anyone.
</para>
<para>
If you cannot offer money, please consider learning the
necessary skills yourself (see the above questions) and
starting work on your own. If you make your project
open-source and publicise it, then other people may eventually
join you, and help you if they find it interesting.
</para>
</section>
<section xml:id="what-is-the-difference-between-scripting-languages-such-as-perl-php-python-or-ruby-and-industrial-strength-languages-such-as-c-c-java-and-c">
<title>What is the difference between “scripting” languages such
as Perl, PHP, Python or Ruby and “Industrial-strength” Languages
such as C, C++, Java and C#?</title>
<para>
Many people have issues with calling dynamic languages, with
dynamic typing and those that are of somewhat more open-source
nature such as Perl, PHP, Python and Ruby “scripting”
languages. See:
</para>
<itemizedlist spacing="compact">
<listitem>
<para>
<link xlink:href="http://web.archive.org/web/20140704054553/http://xoa.petdance.com/Stop_saying_%22script%22">Andy
Lester's Stop saying “script”</link>
(<link xlink:href="http://xoa.petdance.com/Stop_saying_%22script%22">Original
link</link> - currently broken)
</para>
</listitem>
<listitem>
<para>
<link xlink:href="http://www.perl.com/pub/2007/12/06/soto-11.html">Larry
Wall’s “Programming’s Hard - Let’s Go Scripting”</link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="http://use.perl.org/use.perl.org/_chromatic/journal/35804.html">chromatic
- “Program vs. Script”</link>
</para>
</listitem>
</itemizedlist>
<para>
The problem with calling them that is that while they allow
for getting small and simple things done quickly and easily,
large scale projects (100,000s to millions of lines of code)
have been written in them and are still maintained without any
show-stopping difficulties. That is not to say that these
languages do not have their downsides, but they still do not
preclude <emphasis role="strong">general-purpose</emphasis>,
and/or <emphasis role="strong">large-scale</emphasis>
programming.
</para>
<para>
Furthermore, if we consider Perl/PHP/Python/Ruby/Tcl/Lua/etc.
as “scripting languages” and C, C++, Java and C# as
“industrial strength” where does Common Lisp fit in? Where
does Scheme? Where do Haskell and OCaml? What about the
various dialects of Basic? Fortran? COBOL? It seems that the
classification of languages as “scripting” vs “industrial
strength” is more of that of public perception and marketing
as opposed to their actual qualities.
</para>
<para>
On the other hand, we do not wish to claim here that C, C++,
Java and/or C# are necessarily bad languages, or that you
should not study them or refuse job offers that involve
writing code using them.
</para>
</section>
<section xml:id="i-need-to-learn-about-various-base-systems-like-hexadecimal-base-16-binary-base-2-where-can-i-find-information-about-them">
<title>I need to learn about various base systems, like
hexadecimal (base-16), binary (base-2). Where can I find
information about them?</title>
<para>
See:
</para>
<itemizedlist spacing="compact">
<listitem>
<para>
<link xlink:href="https://en.wikipedia.org/wiki/Binary_numeral_system">The
English Wikipedia’s Binary Numeral System</link> - and the
side bar next to it.
</para>
</listitem>
<listitem>
<para>
<link xlink:href="http://www.wikihow.com/Understand-Hexadecimal">wikiHow’s
How to Understand Hexadecimal</link>
</para>
</listitem>
</itemizedlist>
<para>
One thing to note is that numbers are the same regardless of
their representation. E.g: the number represented by the base
ten digits &quot;16&quot; is the same
<link xlink:href="https://en.wikipedia.org/wiki/Platonic_idealism">Platonic
ideal</link> as the hexadecimal representation
&quot;0x10&quot;, the binary representation
&quot;0b10000&quot;, or the base 7 representation
&quot;22&quot;, the English name &quot;sixteen&quot; (or the
count of apples in this:
&quot;🍏🍏🍏🍏🍏🍏🍏🍏🍏🍏🍏🍏🍏🍏🍏🍏&quot;). Therefore, it
is inaccurate to speak of &quot;binary numbers&quot; or
&quot;hexadecimal numbers&quot;.
</para>
</section>
<section xml:id="i-want-to-buy-some-interesting-books-to-read-can-you-recommend-me-some">
<title>I want to buy some interesting books to read. Can you
recommend me some?</title>
<para>
Here are some lists of recommended books by some of our
regulars:
</para>
<itemizedlist spacing="compact">
<listitem>
<para>
<link xlink:href="http://www.shlomifish.org/philosophy/books-recommends/">Shlomi
Fish’s Book Reviews</link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://github.com/vendu/OS-Zero/blob/master/notes/booklist.txt">vendu’s
list of books</link>
</para>
</listitem>
</itemizedlist>
<para>
In addition, here are some recommended lists of books by some
notable software engineers and writers:
</para>
<itemizedlist spacing="compact">
<listitem>
<para>
<link xlink:href="http://web.archive.org/web/20120403095428/https://www.joelonsoftware.com/navlinks/fog0000000262.html">Joel
on Software’s “Book Reviews”</link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://github.com/sindresorhus/awesome#books">Lists
of books from the “Awesome” list of lists</link>
</para>
</listitem>
</itemizedlist>
</section>
<section xml:id="how-do-i-learn-how-to-use-gdb--the-gnu-debugger">
<title>How do I learn how to use GDB (= the GNU
debugger)?</title>
<para>
We are often approached by people who tell us their C or C++
(or whatever) program crashes or otherwise misbehaves and then
ask us why. If that's the case for you, you should realise
that you should learn how to use an interactive debugger in
order to debug your program, and you should learn how to do so
as soon as possible.
</para>
<para>
One such debugger is the open source command-line debugger,
<link xlink:href="https://en.wikipedia.org/wiki/GNU_Debugger">&quot;gdb&quot;</link>,
which can be used to debug programs in C, C++ and some other
languages. Here is some information on learning to use it:
</para>
<itemizedlist spacing="compact">
<listitem>
<para>
<link xlink:href="https://www.cs.cmu.edu/~gilpin/tutorial/">gdb
Tutorial</link> - brief and accurate.
</para>
</listitem>
<listitem>
<para>
<link xlink:href="http://www.shlomifish.org/lecture/W2L/Development/slides/">“Software
Development on Linux” slides</link> - a basic introduction
to gdb.
</para>
</listitem>
<listitem>
<para>
<link xlink:href="http://www.shlomifish.org/tel.foss.org.il-temp/lecture-notes/GDB_Linux_telux.pdf">“Advanced
Debugging with gdb”</link> - by David Khosid.
</para>
</listitem>
<listitem>
<para>
<link xlink:href="http://www.haifux.org/lectures/210/">“gdb
- customize it the way you want”</link> - by guy keren.
</para>
</listitem>
</itemizedlist>
<para>
Also note that gdb has some
<link xlink:href="http://www.shlomifish.org/open-source/resources/editors-and-IDEs/#open-debugger-GUIs">GUI
frontends</link> that may make it easier or more convenient to
use.
</para>
</section>
<section xml:id="i-feel-like-programming-something-but-i-dont-know-what-can-you-suggest-some-good-ideas-for-programs">
<title>I feel like programming something, but I don't know what.
Can you suggest some good ideas for programs?</title>
<para>
For some lists of ideas for what to program see:
</para>
<itemizedlist spacing="compact">
<listitem>
<para>
<link xlink:href="http://perl-begin.org/exercises/">“Links
to Perl Exercises and Challenges” on Perl-Begin</link> -
not entirely Perl-specific.
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://github.com/EbookFoundation/free-programming-books/blob/master/more/problem-sets-competitive-programming.md">“Problem
Sets and Competitive Programming Sites”</link> - a
comprehensive list on GitHub.
</para>
</listitem>
<listitem>
<para>
<link xlink:href="http://www.spoj.com/">Sphere Online
Judge (SPOJ)</link> - a site with many programming
challenges.
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://github.com/samsquire/ideas">“Ideas
for Computing” by Samsquire</link> - a list of advanced
ideas.
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://www.hackerrank.com/">“Hackerrank”
- “Programming problems and competitions”</link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="http://golf.shinh.org/">Anarchy Code
Golf</link>.
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://github.com/melanierichards/just-build-websites">Some
ideas for websites you can build!</link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://github.com/open-source-ideas/open-source-ideas">Open
Source Ideas repository on GitHub</link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://www.reddit.com/r/dailyprogrammer/">/r/dailyprogrammer
on Reddit</link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://github.com/karan/Projects">A
list of practical projects that “anyone can solve in any
programming language.”</link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://medium.freecodecamp.org/every-time-you-build-a-to-do-list-app-a-puppy-dies-505b54637a5d">A
list of ideas for websites one can build</link> - on
freeCodeCamp.org .
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://github.com/florinpop17/app-ideas">List
of ideas for software applications</link> - on GitHub
under MITL.
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://github.com/koollman/stuff-I-would-like/blob/master/Programs.md">koollman's
missing programs he would like</link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://www.shlomifish.org/philosophy/ideas/#computer">Shlomi
Fish’s software-related ideas</link>
</para>
</listitem>
</itemizedlist>
<para>
In addition, note that you may wish to consider contributing
to open source projects that you find useful or interesting.
For more information about that see:
</para>
<itemizedlist spacing="compact">
<listitem>
<para>
<link xlink:href="http://www.shlomifish.org/philosophy/computers/open-source/how-to-start-contributing/tos-document.html">“How
to start contributing to or using open source
software”</link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://www.fsf.org/campaigns/priority-projects/">High
Priority Free Software Projects</link>
</para>
</listitem>
</itemizedlist>
</section>
<section xml:id="does-anyone-know-of-a-program-to-do-insert-task-here">
<title>Does anyone know of a program to do [insert task
here]?</title>
<para>
Such questions are tolerated on the channel, but anyway:
</para>
<itemizedlist spacing="compact">
<listitem>
<para>
Try a
<link xlink:href="https://duckduckgo.com/">DuckDuckGo
Search</link>
</para>
</listitem>
<listitem>
<para>
Try a <link xlink:href="https://www.google.com/">Google
Search</link>
</para>
</listitem>
<listitem>
<para>
Try a <link xlink:href="https://github.com/">GitHub
Search</link>
</para>
</listitem>
</itemizedlist>
<para>
Note that very often these questions describe a task that is
relatively quickly doable in
Python/Perl/insert-productive-language-of-choice so either
learn Python or whatever, or alternatively hire a programmer
to write it for you.
</para>
</section>
<section xml:id="i-want-to-contribute-to-an-open-source-project-but-how-which-one-can-i-contribute-to">
<title>I want to contribute to an open source project, but how?
Which one can I contribute to?</title>
<para>
First of all, it is good that you wish to contribute and good
luck. Here are some resources to get you started:
</para>
<itemizedlist spacing="compact">
<listitem>
<para>
<link xlink:href="http://www.shlomifish.org/philosophy/computers/open-source/how-to-start-contributing/tos-document.html">“How
to start contributing to or using open source
software”</link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://smartbear.com/blog/test-and-monitor/14-ways-to-contribute-to-open-source-without-being/">“14
ways to contribute to open source without being a
programming genius or a rock star”</link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="http://www.catb.org/esr/faqs/hacker-howto.html">“How
to become a hacker?”</link>
</para>
</listitem>
</itemizedlist>
<para>
If you still need ideas for which open source projects to
contribute to then ask yourself - which open source projects
are you using? (Either directly or indirectly.) Which ones are
you interested in? If that fails perhaps try using
<link xlink:href="https://github.com/search">GitHub
search</link>,
<link xlink:href="https://duckduckgo.com/">DuckDuckGo</link>,
<link xlink:href="http://www.google.com/">Google</link>, the
<link xlink:href="https://en.wikipedia.org/wiki/Main_Page">English
Wikipedia search</link> or other search resources.
</para>
</section>
<section xml:id="what-is-open-source-software-does-it-mean-only-that-its-source-is-available">
<title>What is &quot;open source&quot; software? Does it mean
only that its source is available?</title>
<para>
No. According to the
<link xlink:href="https://en.wikipedia.org/wiki/The_Open_Source_Definition">open
source definition</link> an open source software licence must
fulfill more than just the availability of the source code,
including free redistribution and allowing to modify the code
and distribute changes. Read the link on the wikipedia page
for more information.
</para>
</section>
<section xml:id="what-is-fizzbuzz">
<title>What is FizzBuzz?</title>
<para>
In short, FizzBuzz is a simple programming task, which most
decent programmers are expected to be able to easily write,
but, reportedly, most interviewed software development
candidates cannot write it. It's a kind of a
<link xlink:href="https://en.wiktionary.org/wiki/litmus_test">litmus
test</link> for programmers.
</para>
<para>
Namely, in FizzBuzz one has to write a program that prints the
natural numbers from 1 to 100 on one line each, but if the
number is divisible by 3, print &quot;Fizz&quot; instead, and
if it is divisible by 5 print &quot;Buzz&quot; instead; if it
is divisible by both, print &quot;FizzBuzz&quot;.
</para>
<para>
For more information, see:
</para>
<itemizedlist spacing="compact">
<listitem>
<para>
<link xlink:href="http://blog.codinghorror.com/why-cant-programmers-program/">Why
Can’t Programmers Program?</link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="http://rosettacode.org/wiki/FizzBuzz">FizzBuzz
on Rosetta Code</link> (WARNING! The licence is
problematic.)
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition">FizzBuzz
Enterprise Edition</link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://github.com/shlomif/fizz-buzz">Expat-licensed
versions in several languages</link>, written by rindolf
and some other people, including C, Perl 5, Python 2/3,
Scheme, Java, JavaScript, Ruby, Go, C#, Haskell, and Lua.
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://github.com/zenware/FizzBuzz">FizzBuzz
in every programming language</link> - under a
non-specified licence.
</para>
</listitem>
</itemizedlist>
</section>
<section xml:id="how-are-c-c-and-c-c-sharp-related-how-are-they-different">
<title>How are C, C++, and C# (C-sharp) related? How are they
different?</title>
<itemizedlist spacing="compact">
<listitem>
<para>
The
<link xlink:href="https://en.wikipedia.org/wiki/C_%28programming_language%29">C
Programming Language</link> was created by Dennis Ritchie
and other workers, and was used to write most of
<link xlink:href="https://en.wikipedia.org/wiki/Unix">UNIX</link>.
It is a kind of &quot;mid-level&quot; language because
while it is above assembly, it is still lower-level than
most other high-level languages.
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://en.wikipedia.org/wiki/C%2B%2B">C++</link>
originated as some extensions to C to facilitate
object-oriented programming (OOP) there, and has since
developed many more extensions. C code can usually be
compiled using a C++ compiler as is, but such code is no
longer considered idiomatic C++. C and C++ can also call
each other's routines, with relative ease.
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://en.wikipedia.org/wiki/Java_%28programming_language%29">Java</link>
is a programming language whose syntax is superficially
reminiscent of C, but which has otherwise different
syntax, semantics (including garbage collection) and a
completely different standard library.
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://en.wikipedia.org/wiki/C_Sharp_%28programming_language%29">C#</link>
was inspired a lot by Java, and is very similar (but not
compatible), and is not compatible with either C or C++.
It is just sharing a name containing &quot;C&quot; for
presumably marketing and branding purposes.
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://en.wikipedia.org/wiki/Managed_Extensions_for_C%2B%2B">Managed
C++</link> is a C++-like language for
<link xlink:href="https://en.wikipedia.org/wiki/.NET_Framework">the
.NET framework</link> (which is also used to host C#),
which isn't entirely compatible with C++.
</para>
</listitem>
</itemizedlist>
<para>
As a result, the term “the C family of languages” is confusing
and should be avoided, in part because other languages not
mentioned above may share similar syntax to C.
</para>
</section>
<section xml:id="i-am-facing-a-number-of-problems-while-using-floating-point-data-types-eg-float-or-double-is-there-a-explanation-for-this">
<title>I am facing a number of problems while using
floating-point data types (e.g: &quot;float&quot; or
&quot;double&quot;). Is there a explanation for this?</title>
<para>
Computers use binary-encoded numbers because they’re faster at
dealing with them, and because for most calculations, a tiny
error in the 17th decimal place doesn’t matter at all since
the numbers you work with aren’t round (or that precise)
anyway. Moreover, because they use a binary floating point,
they cannot represent a number like 0.1, 0.3, etc. accurately
at all.
</para>
<para>
When the code is compiled, the floating point number is
rounded to nearest number in the format, which results in
rounding error even before the calculations. Furthermore,
associativity in addition may result in different results:
<literal>a + (b + c) != (a + b) + c</literal> and it is
possible to get weird results like
<literal>a + b == a</literal> if a’s exponent is much larger
than b’s.
</para>
<para>
For more information, refer to these resources:
</para>
<itemizedlist spacing="compact">
<listitem>
<para>
<link xlink:href="http://floating-point-gui.de/">Floating
point anomalies</link> is a good resource for problems
regarding floating point weird anamolies.
</para>
</listitem>
<listitem>
<para>
<link xlink:href="http://stackoverflow.com/questions/14859875/c-how-to-avoid-floating-point-arithmetic-error">More
weird problems</link> faced while using floating point
numbers.
</para>
</listitem>
<listitem>
<para>
<link xlink:href="http://stackoverflow.com/questions/590822/dealing-with-accuracy-problems-in-floating-point-numbers">Correction
measures</link> to deal with floating point anamolies.
</para>
</listitem>
<listitem>
<para>
<link xlink:href="http://www.stata.com/support/faqs/data-management/float-data-type/">Accuracy
of a float data-type</link>
</para>
</listitem>
</itemizedlist>
</section>
<section xml:id="how-do-i-hideobscureencrypt-my-source-code-to-prevent-end-users-from-learning-how-it-works">
<title>How do I hide/obscure/“encrypt” my source code to prevent
end-users from learning how it works?</title>
<para>
If you want to distribute some code you wrote and prevent
end-users from learning its inner working, there are a few
things you need to be aware of.
</para>
<para>
The first is that there are
<link xlink:href="http://en.wikipedia.org/wiki/Decompiler">decompilers</link>
and that it is often possible for humans to do
<link xlink:href="https://en.wikipedia.org/wiki/Reverse_engineering">reverse
engineering</link> in order to determine the inner workings of
a program to duplicate them. We were told that there's a
code-obfuscation technique that can usually prevent that, but
its downside is that the resultant code is much larger and
much slower (by a factor of about 100,000), so it'll likely be
unacceptable to you.
</para>
<para>
The second is that some popular approaches for
&quot;hiding&quot; the source code are known to be ineffective
- see
<link xlink:href="http://shlomif-tech.livejournal.com/39732.html">this
post about distributing CPython's .pyc files</link> for an
example, as well as
<link xlink:href="https://lists.gt.net/python/python/123115?do=post_view_threaded">this
2002 thread</link> about obscuring Python code.
</para>
<para>
The third is that a mostly failproof way to avoid revealing
your code is to set up a world-wide-web service (or a
different networked service) for it and have the local
end-user´s code query it using the network stack.
</para>
<para>
Another point is that you should consider trusting your users
instead. Shlomi Fish (“rindolf”) has written a cautionary tale
about the fact that
<link xlink:href="https://en.wikipedia.org/wiki/BitKeeper">BitKeeper</link>’s
parent company, BitMover, has done a series of licence changes
to BitKeeper over the years to prevent abuses from users who
were unlikely to become paying customers out of sheer paranoia
in
<link xlink:href="http://better-scm.shlomifish.org/bk/what-bitmover-got-wrong.html">“What
BitMover Got Wrong?”</link>, and you should better avoid it.
Freenode is dedicated to discussing collaborative and
free/open projects and you are likely to receive a lot of heat
for not trusting your end users.
</para>
<para>
Finally, note that
<link xlink:href="https://en.wikipedia.org/wiki/Copyright">Copyrights</link>
or
<link xlink:href="https://en.wikipedia.org/wiki/Software_patent">software
patents</link> may provide adequate protection into people
misappropriating the working of your code, although they may
be controversial (especially software patents). For more
information, see Eric Sink’s essay
<link xlink:href="http://ericsink.com/articles/Intellectual_Property.html">“Five
Things Every Micro-ISV Should Know About Intellectual
Property”</link> .
</para>
</section>
<section xml:id="who-is-the-worlds-best-programmer">
<title>Who is the world’s best programmer?</title>
<para>
We got asked several times who is world’s best programmer, so
let’s try to answer it once and for all. The first question we
need to ask you is: “Why does it matter?” If you knew who the
best programmer in the world is, do you think you can afford
to hire him? Moreover, as
<link xlink:href="http://images.use.perl.org/use.perl.org/_Ovid/journal/39801.html">a
post by Ovid notes</link>, studies found that the best
programmers are only 5 times more productive than the worst,
which is consistent with productivity variation in other
fields. Furthermore, a contractor who did both web development
and Linux kernel development
<link xlink:href="http://www.shlomifish.org/enough-with-sec/web-devel-has-become-too-hard.xhtml">noted</link>
that despite common belief, “web development is harder than
Linux kernel development”.
</para>
<para>
Finally note that some software developers were able to
contribute a lot to the world of computing while writing only
sub-optimal code. See the post
<link xlink:href="http://shlomif-tech.livejournal.com/33461.html">“Why
some Great Hackers Write Inelegant Code”</link>.
</para>
<para>
The most important thing you can do is constantly try to
improve your programming skills, and learn from your fellow
programmers, and from good and bad code people wrote out
there. One way to achieve that is to be present on software
development's forums, including ##programming .
</para>
</section>
<section xml:id="i-printed-something-but-dont-see-it-on-the-console-yet-my-output-is-out-of-order-help">
<title>I printed something but don't see it on the console yet!
My output is out-of-order? Help!</title>
<para>
You may be suffering from buffering. First of all, go over
Mark Jason Dominus’
<link xlink:href="http://perl.plover.com/FAQs/Buffering.html">“Suffering
from Buffering?”</link> page which is somewhat focused on
these issues for Perl 5. Then you may wish to:
</para>
<orderedlist numeration="arabic" spacing="compact">
<listitem>
<para>
In C, make a judicious use of
<link xlink:href="http://en.cppreference.com/w/c/io/fflush">fflush()</link>,
or use locks for synchronisation.
</para>
</listitem>
<listitem>
<para>
In C++, use
<link xlink:href="http://stackoverflow.com/questions/14105650/how-does-stdflush-work">std::flush</link>.
</para>
</listitem>
<listitem>
<para>
For Python, see
<link xlink:href="https://stackoverflow.com/questions/230751/how-can-i-flush-the-output-of-the-print-function">this
Stackoverflow thread</link>
</para>
</listitem>
<listitem>
<para>
Use similar routines for your programming language of
choice.
</para>
</listitem>
</orderedlist>
</section>
<section xml:id="what-do-np-complete-np-hard-etc-mean">
<title>What do “NP-Complete”, “NP-hard”, etc. mean?</title>
<para>
Try referring to these links:
</para>
<itemizedlist spacing="compact">
<listitem>
<para>
<link xlink:href="https://en.wikipedia.org/wiki/NP-completeness">The
English Wikipedia’s entry</link> - somewhat formal, but
may prove enlightening.
</para>
</listitem>
<listitem>
<para>
<link xlink:href="http://stackoverflow.com/questions/210829/what-is-an-np-complete-in-computer-science">Stackoverflow
Thread</link> - should be more accessible
</para>
</listitem>
<listitem>
<para>
<link xlink:href="http://www.shlomifish.org/humour/fortunes/show.cgi?id=sharp-programming-what-is-NP-complete">Log
of a conversation on ##programming</link>
</para>
</listitem>
</itemizedlist>
<para>
In addition, the English wikipedia has
<link xlink:href="https://en.wikipedia.org/wiki/List_of_NP-complete_problems">a
list</link> of problems that were shown to be NP-complete.
</para>
</section>
<section xml:id="what-do-you-think-about-interpreted-vs-compiled-languages">
<title>What do you think about interpreted vs. compiled
languages?</title>
<para>
First of all note that
<link xlink:href="https://en.wikipedia.org/wiki/Interpreter_%28computing%29">“interpreted”</link>
vs.
<link xlink:href="https://en.wikipedia.org/wiki/Compiler">“compiled”</link>
is an implementation detail, and a programming language may
have more than one implementation.
</para>
<para>
Morever, it is not always that straightforward - there are
also language implementations that compile the raw text source
code into
<link xlink:href="https://en.wikipedia.org/wiki/P-code_machine">p-code</link>,
<link xlink:href="https://en.wikipedia.org/wiki/Bytecode">bytecode</link>,
<link xlink:href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">abstract
syntax tree</link>, or some other
<link xlink:href="https://en.wikipedia.org/wiki/Intermediate_representation">intermediate
representation (IR)</link> and then interpret that; there is
<link xlink:href="https://en.wikipedia.org/wiki/Just-in-time_compilation">just-in-time
compilation (JIT)</link>; some compilers compile to different
high-level languages (see for example the
<link xlink:href="https://github.com/jashkenas/coffeescript/wiki/List-of-languages-that-compile-to-JS">List
of languages that compile to JS</link> on CoffeeScript's wiki
as well as the
<link xlink:href="https://en.wikipedia.org/wiki/Source-to-source_compiler">Wikipedia
page about &quot;Source-to-source compilers&quot;</link>);
some packagers package a runtime of a language with a higher
level code (which to be honest most compilers do even if they
just bind to
<link xlink:href="https://en.wikipedia.org/wiki/C_standard_library">libc</link>).
</para>
<para>
There may also be some other approaches.
</para>
<para>
Note that one should not use the fact that an implementation
is interpreted against it, because it may not be slower than
compiled code all the time, and because it may still be fast
enough for many uses given today’s processors’ speeds.
</para>
<para>
Despite some common belief, C has some interpreters as
<link xlink:href="http://stackoverflow.com/questions/584714/is-there-an-interpreter-for-c">mentioned
on stackoverflow</link>, while some dynamically-typed
languages such as Common Lisp, Scheme, or Python have
compilers.
</para>
<para>
Moreover, note that interpreters are often easier to implement
and port than compilers, which may justify the poorer
performance.
</para>
<para>
As another anecdote, one can think of most
<link xlink:href="https://en.wikipedia.org/wiki/Central_processing_unit">CPUs</link>
as interpreters for their
<link xlink:href="https://en.wikipedia.org/wiki/Machine_code">machine
code</link>, which are implemented using logic gates and
electronic components.
</para>
</section>
<section xml:id="how-is-javascript-related-to-java-what-is-the-difference-between-them">
<title>How is JavaScript related to Java? What is the difference
between them?</title>
<para>
JavaScript (also see
<link xlink:href="https://en.wikipedia.org/wiki/JavaScript">its
Wikipedia entry</link>) is a programming language first
introduced in version 2.0 of the browser
<link xlink:href="https://en.wikipedia.org/wiki/Netscape_%28web_browser%29">Netscape
Navigator</link> which also introduced support for
browser-hosted
<link xlink:href="https://en.wikipedia.org/wiki/Java_applet">Java
applets</link> written in the
<link xlink:href="https://en.wikipedia.org/wiki/Java_%28programming_language%29">Java
programming language</link>.
</para>
<para>
According to
<link xlink:href="https://brendaneich.com/2008/04/popularity/">this
blog post</link> titled “Popularity” it was designed so its
syntax will resemble Java (which ruled out the use of other
popular open source languages at the time) and was named
“JavaScript” for marketing reasons. Despite that, Java and
JavaScript codes are not compatible with one another.
</para>
<para>
For more information, see:
</para>
<itemizedlist spacing="compact">
<listitem>
<para>
<link xlink:href="http://stackoverflow.com/questions/245062/whats-the-difference-between-javascript-and-java?sort=votes">Stackoverflow
Question about “What’s the difference between JavaScript
and Java”</link>
</para>
</listitem>
</itemizedlist>
</section>
<section xml:id="how-can-i-learn-web-development-htmletc">
<title>How can I learn Web Development? (HTML/etc.)?</title>
<para>
First of all, you may wish to go over
<link xlink:href="https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/How_the_Web_works">MDN's
&quot;How the Web works&quot;</link>,
<link xlink:href="http://tldp.org/HOWTO/Unix-and-Internet-Fundamentals-HOWTO/">“The
Unix and Internet Fundamentals HOWTO”</link>, or
<link xlink:href="https://hacks.mozilla.org/2018/04/a-new-video-series-web-demystified/">Mozilla
Hacks' &quot;Web Demystified&quot; video series</link> to gain
some basic understanding of how the Web works over the
Internet.
</para>
<para>
After that, read <link xlink:href="http://htmldog.com/">HTML
Dog</link> which hosts some quality tutorials about HTML, CSS,
and JavaScript.
</para>
<para>
After that, perhaps using a
<link xlink:href="https://davidwalsh.name/introduction-static-site-generators">static
site generator</link> will be good enough for you, and static
sites are more secure and require less maintenance than sites
with
<link xlink:href="https://en.wikipedia.org/wiki/Server-side_scripting">server-side
scripting</link>. If you need something to run on the server,
then you have a lot of choice for
<link xlink:href="https://duckduckgo.com/?q=server-side+technologies+web&amp;ia=web">server-side
technologies</link> and often
<link xlink:href="https://en.wikipedia.org/wiki/Web_framework">web
frameworks</link> and APIs for them.
</para>
<para>
Also see the post
<link xlink:href="https://tomhummel.com/posts/four-web-apps/">“Four
Ways to Build Web Apps” by Tom Hummel</link>
</para>
</section>
<section xml:id="where-can-i-get-help-with-writing-my-own-operating-system-or-kernel">
<title>Where can I get help with writing my own operating system
or kernel?</title>
<para>
First of all, Freenode has
<link xlink:href="irc://irc.freenode.net/%23osdev">a channel
called #osdev</link> and it is possible that you may get
better help there.
</para>
<para>
Otherwise, we should distinguish between two different cases.
The first is that you're just writing the kernel as a learning
exercise and do not intend it to be production-ready. In that
case, you may go forward with whatever design you have in
mind.
</para>
<para>
The other case is that you want your operating system to be
popular. In that case, you should probably make it
<link xlink:href="https://en.wikipedia.org/wiki/POSIX">POSIX</link>-compatible
in order to avoid what Joel on Software calls
<link xlink:href="https://www.joelonsoftware.com/2000/05/24/strategy-letter-ii-chicken-and-egg-problems/">“Chicken
and Egg Problems”</link>. You should also consider
contributing to one or more of the existing
<link xlink:href="https://en.wikipedia.org/wiki/Comparison_of_open-source_operating_systems">open
source operating systems</link> out there, because that way
your efforts will be much more likely to amount to something.
</para>
</section>
<section xml:id="is-software-dev-paradigm-eg-object-oriented-programming-functional-programming-structured-programming-badgoodbetterworse">
<title>Is {software dev paradigm, e.g: Object-Oriented
Programming, Functional Programming, Structured Programming}
bad/good/better/worse?</title>
<para>
We had several people join to try to provoke a discussion
about whether Object-Oriented Programming or a different
software paradigm was bad or had alternatives. These
discussions were rarely constructive and usually were
pointless, so you should avoid sparking them.
</para>
<para>
If you are working on a project that is under your control,
you can try to use programming languages which avoid this
particular paradigm. If you need to use it for your day job,
you can either look for a different job and/or realise that
<link xlink:href="http://shlomifishswiki.branchable.com/Self-Sufficiency/">“Reality
to be commanded must be obeyed.”</link> and all that jazz, and
try to cope with what you have.
</para>
<para>
Otherwise, it is unlikely that adopting a certain programming
paradigm, or alternatively ditching one completely, will
magically solve all the world's software development problems,
and provoking heated debates about it on ##programming is even
less likely to make that happen.
</para>
</section>
<section xml:id="why-are-people-still-using-c-when-there-are-languages-like-rust-or-pony">
<title>Why are people still using C when there are languages
like Rust or Pony?</title>
<para>
First of all note that we do not mean to imply that languages
like
<link xlink:href="https://en.wikipedia.org/wiki/Rust_%28programming_languaged%29">Rust</link>
or <link xlink:href="https://www.ponylang.org/">Pony</link>
are not without their merit, or do not provide any significant
advantages in comparison to C or C++.
</para>
<para>
That put aside, there are some reasons why C may still be
popular:
</para>
<orderedlist numeration="arabic" spacing="compact">
<listitem>
<para>
Due to legacy and inertia and the fact C has been around
for many years before Rust was introduced, there is a lot
of C code out there, and it still needs to be maintained.
</para>
</listitem>
<listitem>
<para>
Rust reportedly compiles extremely slowly, which may be
prohibitive especially for large projects, and similar
complaints were voiced against C++’s compilation speeds.
</para>
</listitem>
<listitem>
<para>
Rust and Pony may be quite more complex than C.
</para>
</listitem>
<listitem>
<para>
Some people may still like C, and they are still allowed
to use it.
</para>
</listitem>
<listitem>
<para>
Rust appears to have become a religion-of-sorts, which
deters some people from using it.
</para>
</listitem>
</orderedlist>
<para>
If you like Rust or Pony or whatever, and wish to promote
them, then it would be a better idea to actively contribute to
and improve their core or ecosystem, rather than ranting about
how much their older alternatives suck on online forums. Like
a wise man once
<link xlink:href="https://github.com/shlomif/fortune-mod/blob/a2c124c5717435772f5d319b074ba226b5d0c71b/fortune-mod/datfiles/definitions#L3142">said</link>:
“After all is said and done, a hell of a lot more is said than
done.”, and you should try to keep the ratio smaller.
</para>
</section>
<section xml:id="how-do-i-factor-a-large-integer-number-into-its-prime-components-quickly-enough-project-euler-problem-3">
<title>How do I factor a large integer number into its prime
components quickly enough? (Project Euler problem 3)</title>
<para>
You can peruse the sources of
<link xlink:href="https://github.com/shlomif/mini-factor">mini-factor</link>
which is quite fast and licensed under the permissive
<link xlink:href="https://tldrlegal.com/license/mit-license">Expat
licence</link>, those of
<link xlink:href="https://github.com/coreutils/coreutils/blob/master/src/factor.c">factor
from GNU coreutils</link> which is under the strong
<link xlink:href="https://en.wikipedia.org/wiki/Copyleft">copyleft</link>
GPLv3 licence, and those of
<link xlink:href="https://svnweb.freebsd.org/base/head/usr.bin/factor/factor.c?view=log">FreeBSD’s
factor</link> which is under a permissive open source licence.
</para>
<para>
Here are some tips in English:
</para>
<orderedlist numeration="arabic" spacing="compact">
<listitem>
<para>
Make sure to divide the number by the found factor
(repeatedly as long as the remainder is 0) so it becomes
smaller.
</para>
</listitem>
<listitem>
<para>
This way, you don't need to check the factors for
primality.
</para>
</listitem>
<listitem>
<para>
If a number is a
<link xlink:href="https://en.wikipedia.org/wiki/Composite_number">composite</link>
(= non-prime), then its smallest prime factor is less or
equal to its
<link xlink:href="https://en.wikipedia.org/wiki/Square_root">square
root</link>. So if you have checked all numbers up to its
root and they didn't divide it, then you know it is prime.
</para>
</listitem>
<listitem>
<para>
Consider skipping common composite factors such as
products of 2 or 3.
</para>
</listitem>
</orderedlist>
</section>
<section xml:id="how-can-i-write-code-to-perform-operations-on-web-sites-for-me-that-otherwise-should-be-done-manually">
<title>How can I write code to perform operations on web-sites
for me? (that otherwise should be done manually)</title>
<para>
This is called
<link xlink:href="https://duckduckgo.com/?q=web+automation;ia=web">web
automation</link> and can be conveniently done in several
languages:
</para>
<itemizedlist spacing="compact">
<listitem>
<para>
The book
<link xlink:href="http://automatetheboringstuff.com/">Automate
the Boring Stuff with Python</link> covers web automation
in Python
</para>
</listitem>
<listitem>
<para>
This
<link xlink:href="http://perl-begin.org/uses/web-automation/">page</link>
covers it using Perl.
</para>
</listitem>
<listitem>
<para>
There are some
<link xlink:href="http://www.shlomifish.org/open-source/resources/networking-clients/#cmd-line-WWW-clients">command
line web clients</link>.
</para>
</listitem>
</itemizedlist>
<para>
Note that if the site provides a
<link xlink:href="https://en.wikipedia.org/wiki/Web_API">WWW-based
API</link>, then you should use it, and that automating
client-side JavaScript may prove to be tricky. You should also
avoid overloading a site or going against its Terms of
Service.
</para>
<para>
Some technologies that allow automating using client-side
JavaScript are:
</para>
<itemizedlist spacing="compact">
<listitem>
<para>
<link xlink:href="https://github.com/angrykoala/awesome-browser-automation#readme">&quot;Awesome
Browser Automation&quot;</link> - list on GitHub
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://developers.google.com/web/updates/2017/04/headless-chrome">Headless
Chrome/Chromium</link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Headless_mode">Firefox's
Headless mode</link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://en.wikipedia.org/wiki/Selenium_%28software%29">Selenium</link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://github.com/puppeteer/puppeteer">Puppeteer</link>
</para>
</listitem>
</itemizedlist>
</section>
<section xml:id="where-can-i-learn-to-write-andor-read-regular-expressions">
<title>Where can I learn to write and/or read regular
expressions?</title>
<para>
Here are some resources:
</para>
<itemizedlist spacing="compact">
<listitem>
<para>
<link xlink:href="https://github.com/aloisdg/awesome-regex">awesome-regex</link>
- a curated list of recommended regular expression
resources.
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://github.com/ziishaned/learn-regex">Learn
Regex Tutorial on GitHub</link> - under the permissive
Expat licence.
</para>
</listitem>
<listitem>
<para>
<link xlink:href="http://www.regular-expressions.info/">regular-expressions.info</link>
</para>
</listitem>
<listitem>
<para>
Page about
<link xlink:href="http://perl-begin.org/topics/regular-expressions/">regular
expressions in Perl</link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://docs.python.org/3/library/re.html">pydoc
for regular expressions</link> in Python
</para>
</listitem>
</itemizedlist>
</section>
<section xml:id="i-have-problems-understanding-recursion-can-you-help">
<title>I have problems understanding recursion. Can you
help?</title>
<itemizedlist spacing="compact">
<listitem>
<para>
The book
<link xlink:href="https://en.wikipedia.org/wiki/Structure_and_Interpretation_of_Computer_Programs">Structure
and Interpretation of Computer Programs</link> (whose
<link xlink:href="https://mitpress.mit.edu/sicp/">text is
available online</link> freely and openly) has a strong
focus about recursion.
</para>
</listitem>
<listitem>
<para>
One way to understand recursion is to understand the
<link xlink:href="https://duckduckgo.com/?q=call+stack;ia=web">call
stack</link> used by programming languages to implement
it.
</para>
</listitem>
<listitem>
<para>
There is a
<link xlink:href="https://softwareengineering.stackexchange.com/questions/25052/in-plain-english-what-is-recursion">Stack
Exchange thread</link> about explaining recursion.
</para>
</listitem>
</itemizedlist>
</section>
<section xml:id="what-does-indentation-mean">
<title>What does &quot;indentation&quot; mean?</title>
<para>
Indentation means that the contents of every block are
promoted from their containing environment by using a shift of
some space. This makes the code easier to read and follow.
</para>
<para>
Code without indentation is harder to read and so should be
avoided. The
<link xlink:href="https://en.wikipedia.org/wiki/Indentation_style">Wikipedia
article</link> lists several styles - pick one and follow it.
</para>
<para>
Also consider using an autoformatter:
<link xlink:href="https://github.com/caramelomartins/awesome-linters">awesome-linters</link>
.
</para>
</section>
<section xml:id="i-shared-my-code-using-a-paste-siteetc-and-people-on-the-channel-complained-that-my-indentation-is-bad--off--inconsistent--but-it-looks-fine-in-my-text-editor-why">
<title>I shared my code (using a paste-site/etc.) and people on
the channel complained that my indentation is bad / off /
inconsistent , but it looks fine in my text editor. Why?</title>
<para>
This is usually caused by mismatch of
<link xlink:href="https://www.reddit.com/r/learnprogramming/comments/1998iy/what_is_the_difference_between_soft_tabs_and_hard/">hard
tabs</link> vs whitespace expansions or because you are using
a different tab expansion step than the paste-site or that of
other channel members' local editor (e.g: 4 spaces, 8 spaces,
2 spaces, 3 spaces). Please make sure your indentation is
consistent either by expanding all tabs to spaces, or by using
a
<link xlink:href="https://en.wikipedia.org/wiki/Prettyprint">prettyprinter</link>
/ autoformatter for your programming language.
</para>
</section>
<section xml:id="i-want-to-release-my-code---which-open-source-licence-should-i-use">
<title>I want to release my code - which (open source) licence
should I use?</title>
<para>
First of all note that
<link xlink:href="https://en.wikipedia.org/wiki/IANAL">IANAL</link>
(I am not a lawyer) and all that jazz. Some resources to get
you started are:
</para>
<orderedlist numeration="arabic" spacing="compact">
<listitem>
<para>
GitHub’s
<link xlink:href="https://choosealicense.com/">choosealicense</link>
which provides the most popular and recommended choices.
</para>
</listitem>
<listitem>
<para>
Understand the distinction between
<link xlink:href="https://en.wikipedia.org/wiki/Permissive_software_licence">permissive
licences</link>, weak
<link xlink:href="https://en.wikipedia.org/wiki/Copyleft">copyleft</link>,
strong copyleft, and
<link xlink:href="https://en.wikipedia.org/wiki/Proprietary_software">proprietary
software</link> licences.
</para>
</listitem>
<listitem>
<para>
The
<link xlink:href="https://www.gnu.org/licenses/license-list.html">licences
list</link> of the Free Software Foundation is
comprehensive, but opinionated.
</para>
</listitem>
<listitem>
<para>
The <link xlink:href="https://opensource.org/licenses">OSI
list of popular licences</link>.
</para>
</listitem>
</orderedlist>
<para>
Please avoid:
</para>
<orderedlist numeration="arabic" spacing="compact">
<listitem>
<para>
Creating your own licence - this risks
<link xlink:href="https://en.wikipedia.org/wiki/License_proliferation">licence
proliferation</link> and may very well be legally unsound.
</para>
</listitem>
<listitem>
<para>
Not specifying a licence - this risks the software being
considered as
<link xlink:href="https://en.wikipedia.org/wiki/All_rights_reserved">All
Rights Reserved</link> by default which may taint and
encumber the future work of software developers who read
it.
</para>
</listitem>
<listitem>
<para>
Choosing an unpopular or obscure licence.
</para>
</listitem>
<listitem>
<para>
Choosing a licence that is
<link xlink:href="https://www.dwheeler.com/essays/gpl-compatible.html">incompatible
with the GPL</link>.
</para>
</listitem>
<listitem>
<para>
If you want to use the
<link xlink:href="https://en.wikipedia.org/wiki/Public_domain">public
domain</link> as a non-licence, please use
<link xlink:href="https://creativecommons.org/choose/zero/">CC0</link>
.
</para>
</listitem>
</orderedlist>
</section>
<section xml:id="what-do-continuous-integration-ci-services-such-as-travis-ci-jenkins-or-appveyor-provide">
<title>What do Continuous Integration (CI) services such as
Travis-CI, Jenkins, or AppVeyor provide?</title>
<para>
First of all, you may wish to peruse
<link xlink:href="https://en.wikipedia.org/wiki/Continuous_integration">the
wikipedia entry on Continuous Integration</link>. A CI service
runs the build and tests on pristine environments (= such that
dependencies need to be explicitly installed) on each version
control commit. For example, it may be configured to install
some dependencies, and then run
<literal>./configure &amp;&amp; make &amp;&amp; make test</literal>.
If one of the steps fails, then the problem is reported, and
the developers need to restore the build to order.
</para>
<para>
While one can set up local CI services (using e.g
<link xlink:href="https://en.wikipedia.org/wiki/Jenkins_%28software%29">Jenkins</link>),
there are hosted services such as
<link xlink:href="https://github.com/features/actions">GitHub
Actions</link>,
<link xlink:href="https://docs.gitlab.com/ee/ci/pipelines/">GitLab
Pipelines</link>,
<link xlink:href="https://en.wikipedia.org/wiki/Travis_CI">Travis-CI</link>
or
<link xlink:href="https://en.wikipedia.org/wiki/AppVeyor">AppVeyor</link>.
They provide a service, which: 1. open source projects can use
free of charge 2. one can pay to use for
non-public-source-projects to hopefully ease the maintenance
burden.
</para>
</section>
<section xml:id="how-do-i-debug-memory-errors-eg-crashes-memory-leaks-double-freeing-in-my-c--etc-programs">
<title>How do I debug memory errors (e.g: crashes, memory leaks,
double-freeing) in my C / etc. programs?</title>
<para>
There are some tools that can help:
</para>
<orderedlist numeration="arabic" spacing="compact">
<listitem>
<para>
<link xlink:href="https://en.wikipedia.org/wiki/Valgrind">valgrind</link>
- an open source memory debugger.
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://en.wikipedia.org/wiki/AddressSanitizer">AddressSanitizer</link>
- another open source tool supported by the GCC and Clang
compilers.
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://en.wikipedia.org/wiki/Insure%2B%2B">Insure++</link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://en.wikipedia.org/wiki/PurifyPlus">PurifyPlus</link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://en.wikipedia.org/wiki/BoundsChecker">BoundsChecker</link>
- Windows-only.
</para>
</listitem>
</orderedlist>
</section>
<section xml:id="how-do-i-remove-duplicates-from-a-list-of-items-how-do-i-make-the-items-unique">
<title>How do I remove duplicates from a list of items? How do I
make the items unique?</title>
<para>
The best way is to use a
<link xlink:href="https://stackoverflow.com/questions/2630738/c-how-to-implement-set-data-structure">Set</link>
or a
<link xlink:href="https://en.wikipedia.org/wiki/Associative_array">dictionary/map/associative-array</link>
<link xlink:href="https://en.wikipedia.org/wiki/Abstract_data_type">ADTs</link>
. For more insights consult:
</para>
<itemizedlist spacing="compact">
<listitem>
<para>
<link xlink:href="http://rosettacode.org/wiki/Remove_duplicate_elements">Rosetta
Code page</link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="http://perl-begin.org/topics/hashes/">Perl
Hashes page</link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set">JavaScript
Set page</link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="http://www.pement.org/awk/awk1line.txt">awk
one-liners</link> - search for &quot;duplicate&quot;
</para>
</listitem>
<listitem>
<para>
<link xlink:href="http://www.catonmat.net/blog/perl-one-liners-explained-part-six/">Perl
one-liners explained</link> - search for
&quot;unique&quot;
</para>
</listitem>
</itemizedlist>
</section>
<section xml:id="how-is-this-symbolcharacterpunctuation-mark-called-in-english">
<title>How is this symbol/character/punctuation mark called in
English?</title>
<para>
The following resources may help:
</para>
<itemizedlist spacing="compact">
<listitem>
<para>
<link xlink:href="https://blog.codinghorror.com/ascii-pronunciation-rules-for-programmers/">ASCII
Pronunciation Rules for Programmers</link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://en.wikipedia.org/wiki/Punctuation">Wikipedia
Punctuation Page</link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="http://shapecatcher.com/">Unicode
Shapecatcher</link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://en.wikipedia.org/wiki/ASCII">Wikipedia
ASCII Page</link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="http://xahlee.info/">Xahlee's Unicode
Pages</link>
</para>
</listitem>
</itemizedlist>
</section>
<section xml:id="how-do-i-find-the-size-andor-length-of-an-array-in-c">
<title>How do I find the size and/or length of an array in
C?</title>
<para>
See
<link xlink:href="https://stackoverflow.com/questions/37538/how-do-i-determine-the-size-of-my-array-in-c">this
Stackoverflow question</link> .
</para>
</section>
<section xml:id="is-it-true-that-macos--mac-os-x-is-superior-to-linux-because-it-is-a-certified-unix">
<title>Is it true that macOS / Mac OS X is superior to Linux
because it is a &quot;Certified Unix&quot;?</title>
<para>
First of all, see
<link xlink:href="https://en.wikipedia.org/wiki/Single_UNIX_Specification">the
wikipedia page</link> for when OSes are considered certified
to use the UNIX® trademark.
</para>
<para>
In the context of this question, we are not trying to disuade
you from using macOS, just to point out that being
&quot;Certified UNIX®&quot; is not too relevant and should not
be used as an argument against using
<link xlink:href="https://en.wikipedia.org/wiki/Linux">Linux</link>.
Namely:
</para>
<orderedlist numeration="arabic" spacing="compact">
<listitem>
<para>
Certified Unix® is reportedly given to particular OSes
running on specific hardware. This is harder for Linux and
other open source Unix-like OSes to achieve because they
support heterogeneous hardware (including
<link xlink:href="https://en.wikipedia.org/wiki/X86">x86</link>
and its peripherals).
</para>
</listitem>
<listitem>
<para>
Two OSes based on the Linux kernel and the
<link xlink:href="https://en.wikipedia.org/wiki/GNU_Project">GNU</link>/etc.
runtime - namely EulerOS and Inspur K-UX - were certified
as Unix. See
<link xlink:href="https://en.wikipedia.org/wiki/Single_UNIX_Specification#EulerOS">the
wikipedia page</link> for details.
</para>
</listitem>
<listitem>
<para>
At a time, Windows NT by Microsoft was certified as Unix
as well.
</para>
</listitem>
<listitem>
<para>
Being certified as such does not mean that the system will
behave exactly as a Unix system is expected to behave. For
example, the
<link xlink:href="https://en.wikipedia.org/wiki/Unix_filesystem">/etc
directory</link> in macOS is reportedly mostly neutered.
</para>
</listitem>
<listitem>
<para>
Most people and organisations do not care too much about
the Unix certification and will be happy to use a sane
non-certified
<link xlink:href="https://en.wikipedia.org/wiki/Unix-like">Unix-like</link>
operating system. The certification as Unix does not buy
you much.
</para>
</listitem>
</orderedlist>
</section>
<section xml:id="is-a-certain-software-technology-good-just-because-i-heard-that-nasa-uses-it">
<title>Is a certain software technology good just because I
heard that NASA uses it?</title>
<para>
<link xlink:href="https://en.wikipedia.org/wiki/NASA">NASA</link>
is large (and has a large budget, and a large scope of
concern) and has been around for many decades, and so uses
many different technologies, some of them may not be too
recommended in the general case. Moreover, like many other
organisations (and individuals), its developers, of software
of otherwise, often experiment with technological trends or
ideas, that turn out to be fads, or even long-term
<link xlink:href="https://en.wikipedia.org/wiki/Technical_debt">technical
debts</link> or liabilities.
</para>
<para>
While the
<link xlink:href="https://en.wikipedia.org/wiki/Python_%28programming_language%29">Python</link>
homepage used to proclaim that &quot;NASA uses Python&quot;,
with a photo of an astronaut, and it is technically true, it
was largely marketing built on common ignorance.
</para>
<para>
Among the other technologies that NASA has used are:
</para>
<orderedlist numeration="arabic" spacing="compact">
<listitem>
<para>
<link xlink:href="https://en.wikipedia.org/wiki/Fortran">Fortran</link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://blog.codinghorror.com/cobol-everywhere-and-nowhere/">COBOL</link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://en.wikipedia.org/wiki/VAX">VAX</link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://en.wikipedia.org/wiki/Forth_%28programming_language%29">Forth</link>
</para>
</listitem>
<listitem>
<para>
Assembly
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://www.nntp.perl.org/group/perl.advocacy/2008/04/msg2383.html">Perl
5</link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://linux.slashdot.org/story/02/12/24/006238/bridging-unix-and-windows-at-nasa">Windows,
MS Word, and MS Outlook</link>
</para>
</listitem>
</orderedlist>
<para>
Note that we do not mean to imply that Python or whatever are
bad just because NASA uses them, just that you should not use
that fact as an argument in their favour.
</para>
<para>
Also note that we are almost sure that other otherwise-esteemed providers
of code, content, technology, education, and entertainment (e.g:
DARPA, IBM, Google, MIT, GNU, Walt Disney, other Microsoft), have
their share of legacy and retrospectively poorly implemented software.
</para>
</section>
<section xml:id="can-a-copyright-owner-change-the-licence-of-an-open-source-project-if-they-dislike-someones-abuse-of-it">
<title>Can a copyright owner change the licence of an open
source project if they dislike someone's abuse of it?</title>
<para>
First of all, note that
<link xlink:href="https://en.wikipedia.org/wiki/IANAL">IANAL</link>
(I am not a lawyer) and all that jazz.
</para>
<para>
A copyright holder may change the licence as they please, and
<link xlink:href="https://en.wikipedia.org/wiki/Permissive_software_licence">permissive
licences</link> also allow other parties to sublicense the
code under different licences. However, the original version
of the code may be
<link xlink:href="https://en.wikipedia.org/wiki/Fork_%28software_development%29">forked</link>
and maintained under the original licence by other parties.
</para>
<para>
For more information, see:
</para>
<itemizedlist spacing="compact">
<listitem>
<para>
<link xlink:href="http://linuxmafia.com/faq/Licensing_and_Law/forking.html">Fear
of Forking</link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="http://www.catb.org/esr/writings/cathedral-bazaar/magic-cauldron/ar01s08.html">ESR's
comments about the &quot;right to fork&quot;</link>
</para>
</listitem>
</itemizedlist>
</section>
<section xml:id="should-i-avoid-using-an-open-source-project-just-because-it-is-primarily-developed-by-a-company-or-individual-that-i-dislike">
<title>Should I avoid using an open source project just because
it is primarily developed by a company or individual that I
dislike?</title>
<para>
First of all, note that
<link xlink:href="https://en.wikipedia.org/wiki/IANAL">IANAL</link>
(I am not a lawyer) and all that jazz.
</para>
<para>
In essence, the
<link xlink:href="https://en.wikipedia.org/wiki/Free_and_open-source_software">FOSS</link>
nature of the licence protects you from claims of misuse by
the copyright holder, but note that some open source licences
(e.g the
<link xlink:href="https://en.wikipedia.org/wiki/Affero_General_Public_License">AGPLv3</link>)
are quite restrictive, which may not be acceptable for your
use cases.
</para>
<para>
An open source project can also be legally forked and
maintained independently if all else fails.
</para>
<para>
So it is a good idea to avoid
<link xlink:href="https://en.wikipedia.org/wiki/Association_fallacy">guilt
by association</link> in this case assuming the relevant
project is of decent quality.
</para>
</section>
<section xml:id="i-was-recommended-a-unix-tool-how-can-i-set-up-a-unix-like-subsystem-on-my-system">
<title>I was recommended a Unix tool. How can I set up a
Unix-like subsystem on my system?</title>
<para>
If you already have Linux, one of the BSDs, or macOS, then
they are usually suitable for that out of the box. If you are
using MS Windows, then look into:
</para>
<orderedlist numeration="arabic" spacing="compact">
<listitem>
<para>
<link xlink:href="https://en.wikipedia.org/wiki/Cygwin">cygwin</link>
- an open source Unix-like environment that runs on
several versions of Win32/Win64.
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://en.wikipedia.org/wiki/Windows_Subsystem_for_Linux">WSL</link>
by Microsoft for Windows 10.
</para>
</listitem>
<listitem>
<para>
Install GNU/Linux or similar on a virtual machine emulator
such as
<link xlink:href="https://en.wikipedia.org/wiki/VirtualBox">VirtualBox</link>.
</para>
</listitem>
</orderedlist>
<para>
For more information, see
<link xlink:href="http://www.shlomifish.org/philosophy/computers/open-source/how-to-start-contributing/tos-document.html">“How
to start contributing to or using Open Source
Software”</link>.
</para>
</section>
<section xml:id="what-is-language-x-good-for">
<title>What is language X good for?</title>
<para>
More often than not, it is asked about a
<link xlink:href="https://en.wikipedia.org/wiki/General-purpose_programming_language">general
purpose programming language</link> which can be used for a
wide array of purposes. Note however, that sometimes they may
not be too suitable for certain tasks for various reasons.
</para>
</section>
<section xml:id="how-can-i-run--program-net-and-aspnet-applications-on-linux-or-macos">
<title>How can I run / program .NET and ASP.NET applications on
Linux or macOS?</title>
<para>
You can try using one or more of:
</para>
<itemizedlist spacing="compact">
<listitem>
<para>
<link xlink:href="https://dotnet.github.io/">.NET
Core</link> - open source by Microsoft and other
contributors
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://www.mono-project.com/">Mono</link>
- also open source
</para>
</listitem>
</itemizedlist>
<para>
Note that some APIs such as
<link xlink:href="https://en.wikipedia.org/wiki/Windows_Presentation_Foundation">WPF</link>
were not open sourced yet.
</para>
</section>
<section xml:id="what-can-i-use-to-document-my-code-can-you-recommend-a-documentation-toolsystemframework-">
<title>What can I use to document my code? Can you recommend a
documentation tool/system/framework ?</title>
<para>
Here are some resources to get you started:
</para>
<orderedlist numeration="arabic" spacing="compact">
<listitem>
<para>
rindolf wrote a page titled
<link xlink:href="https://www.shlomifish.org/philosophy/computers/web/choice-of-docs-formats/">“Choice
of Document Formats”</link>.
</para>
</listitem>
<listitem>
<para>
Wikipedia has a page about
<link xlink:href="https://en.wikipedia.org/wiki/Lightweight_markup_language">Lightweight
markup languages</link> with a comparison.
</para>
</listitem>
<listitem>
<para>
<link xlink:href="http://www.doxygen.org/">Doxygen</link>
is an open source documentation tool that supports many
programming languages.
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://en.wikipedia.org/wiki/DocBook">DocBook</link>
and <link xlink:href="http://www.tei-c.org/">TEI</link>
are open XML-based standards for encoding semantic
documents and translating them, but with complex tooling.
</para>
<orderedlist numeration="arabic" spacing="compact">
<listitem>
<para>
<link xlink:href="https://asciidoctor.org/">AsciiDoctor</link>
can be converted to DocBook.
</para>
</listitem>
</orderedlist>
</listitem>
<listitem>
<para>
Many languages have a common standard for documentation
such as
<link xlink:href="https://en.wikipedia.org/wiki/Plain_Old_Documentation">perl
Pod</link> or
<link xlink:href="https://en.wikipedia.org/wiki/ReStructuredText">python's
RST</link>.
</para>
</listitem>
<listitem>
<para>
<link xlink:href="http://pandoc.org/">http://pandoc.org/</link>
can convert between formats, but the conversion is not
always flawfree.
</para>
</listitem>
</orderedlist>
</section>
<section xml:id="which-linux-distribution--os--version-can-you-recommend">
<title>Which Linux Distribution / OS / version can you
recommend?</title>
<para>
See
<link xlink:href="https://www.shlomifish.org/philosophy/computers/open-source/how-to-start-contributing/tos-document.html#Playing_with_Linux">this
link</link> with an introduction and some recommended
alternatives.
</para>
</section>
<section xml:id="how-can-i-learn-how-to-use-the-git-version-control-system">
<title>How can I learn how to use the Git version control
system?</title>
<para>
The
<link xlink:href="https://github.com/dictcp/awesome-git">“awesome-git”</link>
document on GitHub has a list of tutorials.
</para>
</section>
<section xml:id="what-do-people-mean-when-they-say-spatternreplacement">
<title>What do people mean when they say
“s/pattern/replacement/”?</title>
<para>
This means replace (or &quot;substitute&quot;) the pattern
with the replacement in a previously said text.
</para>
<para>
This notation is derived from the Unix
<link xlink:href="https://en.wikipedia.org/wiki/Ed_%28text_editor%29">ed</link>
editor, which in turn was inherited by
<link xlink:href="https://en.wikipedia.org/wiki/Sed">sed</link>,
<link xlink:href="https://en.wikipedia.org/wiki/Vi">vi</link> (and
vim) and
<link xlink:href="https://en.wikipedia.org/wiki/Perl">Perl</link>.
</para>
<para>
For more information see:
</para>
<itemizedlist spacing="compact">
<listitem>
<para>
<link xlink:href="http://www.catb.org/jargon/html/writing-style.html">Hacker
Writing Style</link>
</para>
</listitem>
</itemizedlist>
</section>
<section xml:id="what-does-foss-mean">
<title>What does “FOSS” mean?</title>
<para>
<link xlink:href="https://en.wikipedia.org/wiki/Free_and_open-source_software">Free
and open source software</link> .
</para>
</section>
<section xml:id="how-do-developers-of-open-source-software-make-money-from-it">
<title>How do developers of open source software make money from
it?</title>
<para>
First of all see
<link xlink:href="https://github.com/nayafia/lemonade-stand">&quot;A
handy guide to financial support for FOSS&quot;</link>.
</para>
<para>
Otherwise, note that copies of FOSS can be copied and
distributed at a very low cost, like other digital files. As a
result, some developers opt to provide their gratis digital
works (including FOSS) free of charge, without expecting to be
reimbursed, simply because they do not get penalised for every
downloaded copy.
</para>
</section>
<section xml:id="how-can-i-calculate-the-top--bottom-number-of-items-of-a-certain-property-from-a-stream-of-them">
<title>How can I calculate the top / bottom number of items of a
certain property from a stream of them?</title>
<para>
You can try using an efficient implementation of the
<link xlink:href="https://en.wikipedia.org/wiki/Priority_queue">Priority
queue ADT</link>. Some implementations of it are:
</para>
<itemizedlist spacing="compact">
<listitem>
<para>
<link xlink:href="https://en.cppreference.com/w/cpp/container/priority_queue">C++
STL</link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://docs.python.org/3/library/heapq.html">Python</link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://metacpan.org/pod/Heap">Perl
5</link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://github.com/rubyworks/pqueue">Ruby</link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://github.com/armon/c-minheap-array">C</link>
and <link xlink:href="https://github.com/vy/libpqueue">C
libpqueue</link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://docs.oracle.com/javase/7/docs/api/java/util/PriorityQueue.html">Java</link>
</para>
</listitem>
</itemizedlist>
</section>
<section xml:id="what-does-bisecting-mean">
<title>What does &quot;bisecting&quot; mean?</title>
<para>
There is a
<link xlink:href="https://en.wikipedia.org/wiki/Bisection_%28software_engineering%29">wikipedia
page</link> that details the
<link xlink:href="https://en.wikipedia.org/wiki/Version_control">VCS</link>
technique, but it has a more general utility.
</para>
<para>
As the old joke goes: &quot;How do you find a lion in the
desert? You split the desert into two halfs, and the lion is
in either one. Then you split the half with the lion into two
quarters, and so on until you find the lion-sized fraction of
the area with the lion.&quot; You can apply this to many
problems, e.g by gradually moving away or temporarily removing
configuration files or directives until you pinpoint the
problem.
</para>
</section>
<section xml:id="how-can-i-overwrite-text-in-a-terminal-or-write-a-console-based-ui">
<title>How can I overwrite text in a terminal or write a
console-based UI?</title>
<itemizedlist spacing="compact">
<listitem>
<para>
The de-facto standard for writing
<link xlink:href="https://en.wikipedia.org/wiki/Text-based_user_interface">TUIs</link>
is
<link xlink:href="https://en.wikipedia.org/wiki/Curses_%28programming_library%29">curses</link>
which has some open source implementations such as
<link xlink:href="https://en.wikipedia.org/wiki/Ncurses">ncurses</link>
and
<link xlink:href="https://en.wikipedia.org/wiki/PDCurses">PDCurses</link>,
but may be somewhat baroque in nature.
</para>
</listitem>
<listitem>
<para>
<link xlink:href="http://www.leonerd.org.uk/code/libtickit/">libtickit</link>
and others are newer and possibly more modern alternatives
with incompatible APIs.
</para>
</listitem>
<listitem>
<para>
There are bindings for other languages like
<link xlink:href="https://docs.python.org/3/howto/curses.html">curses.py</link>
</para>
</listitem>
<listitem>
<para>
For simple tasks, printing no more than the terminal width
(typically 80 characters) and then printing &quot;\r&quot;
and overwriting may be adequate.
</para>
</listitem>
<listitem>
<para>
There are libraries for line input such as
<link xlink:href="https://en.wikipedia.org/wiki/GNU_Readline">readline</link>
(GPLed) or
<link xlink:href="https://duckduckgo.com/?q=libedit&amp;atb=v140-1&amp;ia=web">libedit</link>
(BSDLed).
</para>
</listitem>
</itemizedlist>
</section>
<section xml:id="how-much-time--competitive-programming-problems--books--online-courses--etc-will-it-take-before-i-am-employable--a-master-programmer--etc">
<title>How much time / competitive programming problems / books
/ online courses / etc. will it take before I am employable / a
&quot;master programmer&quot; / etc.?</title>
<para>
How many roads must a man walk down, before you can call him a
man?
<link xlink:href="https://en.wikipedia.org/wiki/Blowin%27_in_the_Wind">&quot;The
answer, my friend, is blowing in the wind&quot;</link>.
</para>
<para>
Somewhat more seriously now, here are some thoughts:
</para>
<para>
There is a
<link xlink:href="https://www.abstrusegoose.com/249">How to
Teach Yourself C++ in 21 days</link> parody comics and a
<link xlink:href="https://www.norvig.com/21-days.html">Teach
Yourself Programming in Ten Years</link> essay (but note that
there was a post claiming that the study it was based on was
about becoming an exceptional artisan, and that it takes far
less time to merely become proficient).
</para>
<para>
In
<link xlink:href="https://www.joelonsoftware.com/2002/12/11/lord-palmerston-on-programming/">&quot;Lord
Palmerston on Programming&quot;</link>, Joel on Software notes
that &quot;Becoming proficient, really proficient, in just one
programming world takes years. Sure, lots of bright teenagers
learn Delphi one week and Python the next week and Perl the
next week and think they are proficient. Yet they don’t have
the foggiest clue how much they’re missing.&quot;.
</para>
<para>
You can probably get an entry-level or junior position
software development job with relatively little or no
experience, but likely one with a relatively low salary.
</para>
<para>
Some books like
<link xlink:href="https://en.wikipedia.org/wiki/The_Pragmatic_Programmer">&quot;The
Pragmatic Programmer&quot;</link> or
<link xlink:href="https://www.joelonsoftware.com/2004/05/05/mike-gunderloys-coder-to-developer/">&quot;Coder
to Developer&quot;</link> aim to teach inexperienced
developers, part of the wisdom gained by experience.
</para>
<para>
It is a perceived fact among software developers that some
developers write more elegant code with only six months of
experience, than many developers with ten years of experience
and Ph.D.'s in Computer Science.
</para>
<para>
There is an
<link xlink:href="https://www.goodreads.com/quotes/306037-none-of-our-men-are-experts-we-have-most-unfortunately">interesting
quote by Henry Ford about &quot;experts&quot;</link>:
</para>
<para>
“ None of our men are &quot;experts.&quot; We have most
unfortunately found it necessary to get rid of a man as soon
as he thinks himself an expert -- because no one ever
considers himself expert if he really knows his job. A man who
knows a job sees so much more to be done than he has done,
that he is always pressing forward and never gives up an
instant of thought to how good and how efficient he is.
Thinking always ahead, thinking always of trying to do more,
brings a state of mind in which nothing is impossible. The
moment one gets into the &quot;expert&quot; state of mind a
great number of things become impossible. — From Henry Ford
Sr., &quot;My Life and Work,&quot; p. 86 (1922) ”
</para>
<para>
According to the Coding Horror blog
<link xlink:href="https://blog.codinghorror.com/why-cant-programmers-program/">most
interviewed job candidates cannot program FizzBuzz</link>.
</para>
<para>
Also note that being proficient and experienced may not
automatically get you accepted into job openings because there
are
<link xlink:href="https://shlomif.livejournal.com/4408.html">other
factors that employers may find important</link>.
</para>
<para>
The <link xlink:href="https://learnxinyminutes.com/">learn X
in Y minutes</link> site provides short introductions to
computing topics which, although potentially useful, are
likely not enough to become truly proficient.
</para>
<para>
To sum up, there is no clear cut answer and magical moment
during which you transition from a &quot;newbie&quot; into a
&quot;super duper rock star ninja wizard awesomesauce
hotstuff&quot; dev. However, the more you learn and try, the
better off you'll be with the right attitude.
</para>
</section>
<section xml:id="what-do-you-mean-by-generating-makefiles-or-by-generating-code-in-general">
<title>What do you mean by &quot;generating makefiles&quot; or
by &quot;generating code&quot; in general?</title>
<para>
One can write code in some programming language that will emit
plaintext, which in turn is valid code or markup of the same
programming language or a different one that can be passed to
its backend for execution. This is called &quot;code
generation&quot;.
</para>
<para>
For more information, see:
</para>
<orderedlist numeration="arabic" spacing="compact">
<listitem>
<para>
<link xlink:href="https://www.gnu.org/software/autogen/">GNU
Autogen</link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://www.shlomifish.org/open-source/resources/text-processing-tools/">Text
Processing Tools</link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://en.wikipedia.org/wiki/Metaprogramming">Metaprogramming</link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="http://www.catb.org/esr/writings/taoup/html/generationchapter.html">Code
Generation Chapter from “The Art of Unix
Programming”</link>
</para>
</listitem>
</orderedlist>
</section>
<section xml:id="will-a-change-i-would-like-to-do-break-some-functionality">
<title>Will a change I would like to do break some
functionality?</title>
<para>
As the
<link xlink:href="https://github.com/shlomif/shlomif-email-signature/blob/master/shlomif-sig-quotes.txt#L1988">aphorism</link>
goes: <quote>The difference between theory and practice is that in
theory, there is no difference between theory and practice,
while in practice, there is.</quote>. There is usually a risk,
however small, that a change will break some functionality.
With good tooling (such as
<link xlink:href="https://en.wikipedia.org/wiki/Version_control">Version
control</link> (git-scm / etc.) ,
<link xlink:href="https://en.wikipedia.org/wiki/Virtual_machine">Virtual
machines</link> ( KVM , VMware, Xen, VirtualBox, etc. ) and
<link xlink:href="https://en.wikipedia.org/wiki/OS-level_virtualisation">Docker
/ etc.</link> ), and having a comprehensive automated tests'
suite. it should be relatively easy to revert a change which
introduced regressions, and you should do adequate testing.
</para>
<para>
A change may have to be avoided due to being estimated as too
time or money consuming, or as having too little gain.
However, promising changes should be attempted because:
</para>
<orderedlist numeration="arabic" spacing="compact">
<listitem>
<para>
&quot;No guts - no glory.&quot;
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://szabgab.com/what-does--if-it-aint-broke-dont-fix-it--really-mean.html">What
does &quot;if it ain't broke, don't fix it&quot; really
mean?</link>
</para>
</listitem>
<listitem>
<para>
If you never change anything, your project won't progress.
</para>
</listitem>
</orderedlist>
</section>
<section xml:id="what-does-object-oriented-programming--oop--mean">
<title>What does Object-Oriented Programming ( OOP )
mean?</title>
<para>
When people say
<link xlink:href="https://en.wikipedia.org/wiki/Object-oriented_programming">OOP</link>
they can mean one of several things:
</para>
<itemizedlist spacing="compact">
<listitem>
<para>
A catch-all phrase for the paradigm.
</para>
</listitem>
<listitem>
<para>
Like
<link xlink:href="https://softwareengineering.stackexchange.com/questions/46592/so-what-did-alan-kay-really-mean-by-the-term-object-oriented">Alan
Kay noted:</link> <quote>Actually, I made up the term
object-oriented, and I can tell you I did not have C++ in
mind. An important thing here is—I have many of the same
feelings about Smalltalk </quote>
</para>
</listitem>
<listitem>
<para>
The &quot;OOP/OOD&quot; approach taken by C++ and later
Java and C# and other languages, which was inspired by
<link xlink:href="https://en.wikipedia.org/wiki/Simula">Simula</link>.
</para>
</listitem>
</itemizedlist>
<para>
As a result, the term has become somewhat muddled. Also note
that if the language is Turing-complete, then usually one can
implement OOP-like systems such as
<link xlink:href="https://en.wikipedia.org/wiki/GObject">GObject</link>
or <link xlink:href="http://libcello.org/">libcello</link> for
C.
</para>
</section>
<section xml:id="what-does-functional-programming--fp--mean">
<title>What does Functional Programming ( FP ) mean?</title>
<para>
Like OOP, FP can mean several things:
</para>
<orderedlist numeration="arabic" spacing="compact">
<listitem>
<para>
The concept of programming without mutation or side
effects. This was modelled in
<link xlink:href="https://en.wikipedia.org/wiki/Lambda_calculus">Lambda
Calculus</link>, and can often also be done in imperative
languages.
</para>
</listitem>
<listitem>
<para>
A language that is &quot;marketed&quot; as a functional
language, which includes non-purely functional languages
such as
<link xlink:href="https://en.wikipedia.org/wiki/Scheme_%28programming_language%29">Scheme</link>
or
<link xlink:href="https://en.wikipedia.org/wiki/Standard_ML">https://en.wikipedia.org/wiki/Standard_ML</link>
and excludes others which have functional programming
capabilities such as Perl, Ruby, or JavaScript.
</para>
</listitem>
<listitem>
<para>
The polymorphism implementation in such statically-typed
languages such as Haskell, Standard ML, or OCaml.
</para>
</listitem>
<listitem>
<para>
A functional code, i.e: one that has
<link xlink:href="https://www.shlomifish.org/philosophy/computers/high-quality-software/rev2/">external
quality</link>: is mostly bug free, has acceptable
performance, etc. as opposed to the elegance of the code,
and other internal quality aspects.
</para>
</listitem>
</orderedlist>
</section>
<section xml:id="why-do-people-keep-speaking-against-language">
<title>Why do people keep speaking against [language]?</title>
<para>
Because it is
<link xlink:href="http://shlomifishswiki.branchable.com/Never_Try_to_Please_Everyone/">impossible
to please everyone</link> or as
<link xlink:href="https://en.wikiquote.org/wiki/Bjarne_Stroustrup">Bjarne
Stroustrup noted</link>: <quote>There are only two kinds of
languages: the ones people complain about and the ones nobody
uses</quote>.
</para>
<para>
Furthermore, rindolf identified
<link xlink:href="https://www.shlomifish.org/philosophy/computers/your-programming-language-must-suck/">several
tradeoffs</link> in programming language design which means no
perfect language can ever exist, and for every chosen language
design, some people will dislike it or complain about it.
</para>
<para>
So some people will always complain, and while their opinions
may have merit, it does not imply the language is not
otherwise decent and usable. One cannot afford to
<link xlink:href="https://www.joelonsoftware.com/2000/04/06/things-you-should-never-do-part-i/">completely
rewrite</link> the whole codebase in the trendiest language
every month or even every year (although gradual conversions
are a less suicidal option), so many languages will linger-on
due to legacy.
</para>
</section>
<section xml:id="how-can-i-handle-several-different-tasks--events-eg-replying-networking-requests-at-the-same-time">
<title>How can I handle several different tasks / events (e.g:
replying networking requests) at the same time?</title>
<para>
You likely want an
<link xlink:href="https://en.wikipedia.org/wiki/Event-driven_programming">event-driven
programming</link> approach using an events / asynchronous
library or framework. Some examples for those are:
</para>
<orderedlist numeration="arabic" spacing="compact">
<listitem>
<para>
<link xlink:href="https://en.wikipedia.org/wiki/Libuv">libuv</link>
and the older
<link xlink:href="https://en.wikipedia.org/wiki/Libevent">libevent</link>
for C.
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://en.wikipedia.org/wiki/Twisted_%28software%29">Twisted</link>
(which may be somewhat baroque), and
<link xlink:href="https://docs.python.org/3/library/asyncio.html">asyncio</link>
for Python (e.g.
<link xlink:href="https://pydle.readthedocs.io/en/stable/">the
pydle IRC library for asyncio</link>).
</para>
</listitem>
<listitem>
<para>
Some alternatives for Perl are listed on
<link xlink:href="https://perl-begin.org/uses/multitasking/">this
page</link>.
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://en.wikipedia.org/wiki/Nodejs">Node.js</link>
is inherently event-driven.
</para>
</listitem>
</orderedlist>
<para>
There are other approaches for multitasking including
<link xlink:href="https://en.wikipedia.org/wiki/Thread_%28computer_science%29">multithreading</link>,
<link xlink:href="https://en.wikipedia.org/wiki/Computer_process">multiprocessing</link>,
<link xlink:href="https://en.wikipedia.org/wiki/Distributed_computing">distributed
computing</link>, as well as hybrid approaches.
</para>
</section>
<section xml:id="how-can-i-make-insert-application-or-library-here-from-scratch">
<title>How can I make [insert application or library here] from
scratch?</title>
<para>
We appreciate your enthusiasm, and often writing small-scoped
systems' components &quot;from scratch&quot; is a useful
exercise, for learning as well as for proof of implementation
and reproducibility.
</para>
<para>
<link xlink:href="https://twitter.com/shlomif/status/1542047869989011457">Tweet</link>:
“My friend Botje from freenode noted that some people on its
#osdev chatroom, have implemented kernels from scratch, which
supported enough of POSIX to bootstrap a GNU (
<link xlink:href="https://gnu.org">https://gnu.org</link> )
system [as I suspected]. Now try this with CSS 2.1…”.
</para>
<para>
However, see:
</para>
<orderedlist numeration="arabic" spacing="compact">
<listitem>
<para>
Carl Sagan:
<link xlink:href="https://www.youtube.com/watch?v=7s664NsLeFM">“If
you wish to make an apple pie from scratch, you must first
invent the universe,”</link>
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://www.reddit.com/r/edmproduction/comments/60zh48/do_you_ever_feel_like_your_cheating_by_using/dfasidh/">“I
thought using loops was cheating…”</link> on reddit.
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://www.shlomifish.org/humour/bits/It-s-not-a-Fooware-It-s-an-Operating-System/">&quot;It’s
not a Fooware - it's an operating system!&quot;</link>
</para>
</listitem>
</orderedlist>
<para>
Different operating systems, programming languages, and
runtimes provide different facilities out of the box. For
example, cpython3 has a bundled
<link xlink:href="https://docs.python.org/3/library/http.server.html">HTTP
server</link>. You are probably going to rely on prior art
when implementing your task and
<link xlink:href="https://www.shlomifish.org/humour/fortunes/show.cgi?id=esr-catb--great-programmers">that
is OK</link>.
</para>
<para>
Merging these 2 sides-of-the-coin, we get (from fortune-mod):
</para>
<programlisting>
A young man wrote to Mozart and said:

Q: &quot;Herr Mozart, I am thinking of writing symphonies.
Can you give me any suggestions as to how to get started?&quot;
A: &quot;A symphony is a very complex musical form,
perhaps you should begin with some simple lieder
and work your way up to a symphony.&quot;
Q: &quot;But Herr Mozart, you were writing symphonies
when you were 8 years old.&quot;
A: &quot;But I never asked anybody how.&quot;
</programlisting>
</section>
<section xml:id="how-hard-is-it-to-implement-my-own-compiler">
<title>How hard is it to implement my own compiler?</title>
<para>
That depends on the source, target, and implementation
languages. A compiler from
<link xlink:href="https://en.wikipedia.org/wiki/Brainfuck">brainfuck</link>
to
<link xlink:href="https://en.wikipedia.org/wiki/C_%28programming_language%29">C</link>
can be written in, say,
<link xlink:href="https://en.wikipedia.org/wiki/Python_%28programming_language%29">Python</link>
in a few hours. On the other hand, an optimising compiler from
<link xlink:href="https://en.wikipedia.org/wiki/C%2B%2B17">C++17</link>
to
<link xlink:href="https://en.wikipedia.org/wiki/X86-64">x86-64</link>
machine code will likely take months or more to implement even
by very competent programmers.
</para>
</section>
<section xml:id="how-can-i-achieve-this-task-using-unix-shell">
<title>How can I achieve this task using Unix shell?</title>
<para>
Often many programming tasks outgrow the Unix shells'
functionality. In that case use
<link xlink:href="https://github.com/shlomif/Freenode-programming-channel-FAQ/blob/master/FAQ_with_ToC__generated.md#i-want-to-learn-programming-which-language-should-i-start-with">python
or similar</link>.
</para>
</section>
<section xml:id="how-do-i-create-an-installable-exe-or-msi-out-of-my-pythonetc-code">
<title>How do I create an installable .exe or .msi out of my
Python/etc. code?</title>
<para>
First of all note that these solutions are not effective ways
to
<link xlink:href="https://github.com/shlomif/Freenode-programming-channel-FAQ/blob/master/FAQ_with_ToC__generated.md#how-do-i-hideobscureencrypt-my-source-code-to-prevent-end-users-from-learning-how-it-works">hide
the code's inner workings from end-users</link>.
</para>
<para>
Otherwise, you can try using:
</para>
<itemizedlist spacing="compact">
<listitem>
<para>
<link xlink:href="https://www.pyinstaller.org/">PyInstaller</link>,
<link xlink:href="https://nuitka.net/">Nuitka</link>, and
similar for Python.
</para>
</listitem>
<listitem>
<para>
<link xlink:href="https://metacpan.org/pod/PAR">PAR</link>
for Perl.
</para>
</listitem>
</itemizedlist>
</section>
<section xml:id="will-artificial-intelligence-ai-eventually-eliminate-the-need-for-paid-human-programmers-workers">
<title>Will Artificial Intelligence (“AI”) eventually eliminate
the need for paid human programmers' workers?</title>
<para>
Many people asked us that, and these discussions have not been
too fruitful.
</para>
<para>
First of all, note that a far more efficient way for you to
earn money than working as a grunt software developer, is to
request it from people (whether online or in reallife) in
exchange for sessions of &quot;amateur philosophy /
comedy&quot;. These have also been called &quot;education and
entertainment&quot;, &quot;geeking out&quot;, or even
&quot;love / knowledge&quot;.
</para>
<para>
You can think of that as &quot;begging for donations with
style&quot;.
</para>
<para>
<emphasis role="strong">Pro tip:</emphasis>
&quot;originality&quot; is overrated: see
<link xlink:href="https://www.shlomifish.org/philosophy/culture/case-for-commercial-fan-fiction/">&quot;Commercial
Real Person Fan Fiction (RPFs), crossovers and parodies as
2021 geek/hacker imperatives for revitalising the film
industry&quot;</link>.
</para>
<para>
Most of the best salaried employees are
<link xlink:href="https://www.shlomifish.org/philosophy/culture/case-for-commercial-fan-fiction/">geeky</link>,
and will not work on projects they consider unimportant even
for obscene wages. Geeks are also known as
&quot;amateurs&quot;: workers who love their work.
</para>
<para>
If you still want a job (say because you are bored), then
there are many non-software-development openings.
</para>
<para>
As a case study, if you need money, then &quot;rindolf&quot;
(see
<link xlink:href="https://www.shlomifish.org/me/contact-me/">his
contact info</link>) encourages you to:
</para>
<orderedlist numeration="arabic" spacing="compact">
<listitem>
<para>
Lookup his bank credentials on GitHub, and —
</para>
</listitem>
<listitem>
<para>
Extract 25,000 US dollars , which should allow you to
support yourself for many days.
</para>
</listitem>
</orderedlist>
<para>
(There are similar publicly-viewable lists on GitHub with bank
credentials of many rich celebrities.)
</para>
</section>
<section xml:id="which-music-do-you-listen-to-while-programming">
<title>Which music do you listen to while programming?</title>
<para>
A lot of people ask us that. Different software developers
have different musical tastes, and may find different music
suitable to listen to while programming. Some of them may find
it hard to concentrate while listening to music.
</para>
<para>
That put aside, here are some recommendations from our
regulars:
</para>
<itemizedlist spacing="compact">
<listitem>
<para>
rindolf listens mostly to Pop and Rock (while being fond
of tracks of many other genres) and has a
<link xlink:href="http://www.shlomifish.org/art/recommendations/music/">list
of recommended albums</link> and a (very incomplete)
<link xlink:href="https://www.youtube.com/watch?v=LbNu1UnJCUY;list=FLc6rd10fdTTa8IBAdau_Cww">favourites
playlist on YouTube</link>.
</para>
</listitem>
</itemizedlist>
</section>
<section xml:id="is-it-true-that-programming-is-more-about-anime-than-programming-just-like-anime-is-more-about-programming-than-anime">
<title>Is it true that ##programming is more about Anime than
programming? (Just like #anime is more about programming than
Anime)</title>
<para>
That's not really true. While we sometimes discuss popular
culture and entertainment (including but not limited to
<link xlink:href="https://en.wikipedia.org/wiki/Anime">Anime</link>),
most of our conversations are about programming, or related
computer help. It's not our fault that your favourite
Anime-themed channel discusses programming a lot, and that may
be caused by the fact that the IRC medium and Freenode in
particular are somewhat more &quot;techie&quot;-oriented. So
don't expect to join ##programming and hear many quality
discussions about Anime.
</para>
</section>
</section>
<section xml:id="about-this-faq">
<title>About this FAQ</title>
<section xml:id="this-faq-seems-useful-why-isnt-it-in-the-channels-topic">
<title>This FAQ seems useful. Why isn't it in the channel's
topic?</title>
<para>
Only channel operators can edit the /topic and none of them
have seen it fit to put it there. Some of the maintainers of
this FAQ approve of it being there (and the licencing terms
allow that.), but none of them are channel ops. So there you
go.
</para>
</section>
<section xml:id="does-this-faq-reflect-the-opinions-of-the-channel-as-a-whole">
<title>Does this FAQ reflect the opinions of the channel as a
whole?</title>
<para>
##programming is a collective and often different members of
it have different opinions, so there is often no unified
opinion. As the old joke goes: &quot;Ask N programmers what
they think about X, and you'll get at least N+1
opinions.&quot; The contributors to this document tried to be
as informative and non-bigotted as possible, but there
probably is some bias.
</para>
<para>
If you do not approve of parts of this document, you can:
</para>
<orderedlist numeration="arabic" spacing="compact">
<listitem>
<para>
Send a pull request or a patch.
</para>
</listitem>
<listitem>
<para>
Fork it and maintain your own version (which you are
entitled to do after accepting some preconditions such as
giving attribution).
</para>
</listitem>
<listitem>
<para>
Write a similar document of your own.
</para>
</listitem>
</orderedlist>
</section>
</section>
<section xml:id="licencelicense">
<title>Licence/License</title>
<para>
The textual content of this document is made available under the
<link xlink:href="https://creativecommons.org/licenses/by/4.0/">Creative
Commons Attribution (CC-by) 4.0 International licence</link> (or
at your option - any later version). Whatever code is given here
is made available under the
<link xlink:href="https://en.wikipedia.org/wiki/MIT_License">MIT/Expat
License</link>. Share and enjoy!
</para>
</section>
</section>
</article>
